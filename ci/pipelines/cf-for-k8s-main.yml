---
#! Extract common platform and image_resource details so task configs can be more concise
x-config: &common-task-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: relintdockerhubpushbot/cf-for-k8s-ci

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

resources:
- name: cf-for-k8s-develop
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    ignore_paths:
    - ci/**

- name: cf-for-k8s-last-release
  type: git
  icon: github
  source:
    branch: main
    tag_filter: "v*"
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readwrite_deploy_key.private_key))

- name: cf-for-k8s-all-branches
  type: git
  icon: github
  source:
    branch: develop
    uri: https://github.com/cloudfoundry/cf-for-k8s.git

- name: cf-for-k8s-ci
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - ci/**

- name: cf-acceptance-tests
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-acceptance-tests
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))

- name: runtime-ci
  type: git
  icon: github
  source:
    branch: master
    uri: https://github.com/cloudfoundry/runtime-ci.git

- name: ready-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: k8s-dev/ready
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: destroy-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: k8s-dev/destroy
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: cf-for-k8s-kind-gcp-terraform-templates
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-for-k8s
    branch: develop
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - deploy/kind-on-gcp/terraform/**

- name: terraform
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))

- name: cf-for-k8s-main-push
  type: git
  icon: github
  source:
    branch: main
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readwrite_deploy_key.private_key))

- name: deliver-tracker-stories
  type: tracker
  source:
    token: ((cf_relint_tracker_api_token))
    project_id: "1382120"
    tracker_url: https://www.pivotaltracker.com

- name: terraform-rds
  type: terraform
  source:
    env_name: aws-rds
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))

- name: terraform-s3
  type: terraform
  source:
    env_name: aws-s3
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))

- name: cf-for-k8s-s3-terraform-templates
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-for-k8s
    branch: develop
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
      - deploy/s3/terraform/**

jobs:
- name: run-unit-tests
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
      trigger: true
    - get: cf-for-k8s-ci

  - task: run-unit-tests
    file: cf-for-k8s-ci/ci/tasks/run-unit-tests/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop

- name: branch-freshness
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-all-branches
      trigger: true
    - get: runtime-ci

  - task: validate-branch-freshness
    file: runtime-ci/tasks/validate-branch-freshness/task.yml
    input_mapping:
      repo: cf-for-k8s-all-branches

- name: test-vendir-sync
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
      trigger: true
    - get: cf-for-k8s-ci

  - task: check-vendir-sync
    file: cf-for-k8s-ci/ci/tasks/check-vendir-sync/task.yml
    input_mapping:
      ci-tasks: cf-for-k8s-ci
      cf-for-k8s: cf-for-k8s-develop
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))

- name: validate-gke
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
      passed:
      - test-vendir-sync
      - run-unit-tests
      trigger: true
    - get: cf-for-k8s-ci

  - put: ready-pool
    params:
      acquire: true

  - task: display-cluster-info
    file: cf-for-k8s-ci/ci/tasks/display-gke-cluster-info/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))

  - task: install-cf
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      pool-lock: ready-pool
      cf-for-k8s: cf-for-k8s-develop
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
      APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
      DOMAIN: k8s-dev.relint.rocks

  - task: run-smoke-test
    file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      SMOKE_TEST_SKIP_SSL: false

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      APP_NAME: lingering-node-app
      VERIFY_EXISTING_APP: false

  - task: delete-cf
    file: cf-for-k8s-ci/ci/tasks/delete-cf/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))

  - put: destroy-pool
    params:
      add: ready-pool

  - put: ready-pool
    params:
      remove: ready-pool

- name: validate-upgrade
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
      passed:
      - test-vendir-sync
      - run-unit-tests
      trigger: true
    - get: cf-for-k8s-last-release
    - get: cf-for-k8s-ci
    - get: runtime-ci

  - put: ready-pool
    params:
      acquire: true

  - task: display-cluster-info
    file: cf-for-k8s-ci/ci/tasks/display-gke-cluster-info/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))

  - task: install-cf-last-release
    file: cf-for-k8s-last-release/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      pool-lock: ready-pool
      cf-for-k8s: cf-for-k8s-last-release
      cf-for-k8s-ci: cf-for-k8s-last-release
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      DOMAIN: k8s-dev.relint.rocks

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-last-release
    params:
      APP_NAME: jp-node-app
      VERIFY_EXISTING_APP: false

  - task: upgrade-cf-to-develop
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      pool-lock: ready-pool
      cf-for-k8s: cf-for-k8s-develop
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      DOMAIN: k8s-dev.relint.rocks
      UPGRADE: true
      UPTIMER: true
      UPTIMER_FAIL_ON_DOWNTIME: false
      EMIT_UPTIMER_METRICS_TO_WAVEFRONT: true
      WAVEFRONT_API_KEY: ((wavefront_ci_service_account))
      WAVEFRONT_API_ENDPOINT: "https://vmwareprod.wavefront.com/report"
      SOURCE_PIPELINE: upgrade-from-last-release

  - in_parallel:
    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      params:
        SMOKE_TEST_SKIP_SSL: true

    - task: verify-existing-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      params:
        APP_NAME: jp-node-app
        VERIFY_EXISTING_APP: true
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop

  - task: delete-cf
    file: cf-for-k8s-ci/ci/tasks/delete-cf/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))

  - put: destroy-pool
    params:
      add: ready-pool

  - put: ready-pool
    params:
      remove: ready-pool

- name: run-cats
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
      passed:
      - test-vendir-sync
      - run-unit-tests
      trigger: true
    - get: cf-for-k8s-ci
    - get: cf-acceptance-tests

  - put: ready-pool
    params:
      acquire: true

  - task: display-cluster-info
    file: cf-for-k8s-ci/ci/tasks/display-gke-cluster-info/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))

  - task: install-cf
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      pool-lock: ready-pool
      cf-for-k8s: cf-for-k8s-develop
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
      APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
      DOMAIN: k8s-dev.relint.rocks

  - task: run-cats
    file: cf-for-k8s-ci/ci/tasks/run-cats/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      INCLUDE_APPS: true
      INCLUDE_ROUTING: true
      INCLUDE_DETECT: true
      INCLUDE_INTERNET_DEPENDENT: true

  ensure:
    do:
    - task: delete-cf
      file: cf-for-k8s-ci/ci/tasks/delete-cf/task.yml
      input_mapping:
        pool-lock: ready-pool
      params:
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))

    - put: destroy-pool
      params:
        add: ready-pool

    - put: ready-pool
      params:
        remove: ready-pool

- name: validate-external-db
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
      passed:
      - test-vendir-sync
      - run-unit-tests
      trigger: true
    - get: cf-for-k8s-ci

  - put: ready-pool
    params:
      acquire: true

  - task: display-cluster-info
    file: cf-for-k8s-ci/ci/tasks/display-gke-cluster-info/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))

  - task: install-postgres
    file: cf-for-k8s-ci/ci/tasks/install-postgres/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))

  - task: install-cf
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      pool-lock: ready-pool
      cf-for-k8s: cf-for-k8s-develop
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
      APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
      USE_EXTERNAL_DB: true
      DOMAIN: k8s-dev.relint.rocks

  - task: run-external-db-validation-test
    file: cf-for-k8s-ci/ci/tasks/run-external-db-validation-test/task.yml
    input_mapping:
      pool-lock: ready-pool
      cf-for-k8s: cf-for-k8s-develop
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      EXTERNAL_DB: "incluster"

  - in_parallel:
    - task: run-smoke-test
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      params:
        SMOKE_TEST_SKIP_SSL: false

    - task: push-test-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      params:
        APP_NAME: lingering-node-app
        VERIFY_EXISTING_APP: false

  - task: delete-cf
    file: cf-for-k8s-ci/ci/tasks/delete-cf/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))

  - task: delete-postgres
    input_mapping:
      pool-lock: ready-pool
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-ci
      - name: pool-lock
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          source cf-for-k8s-ci/ci/helpers/gke.sh

          cluster_name="$(cat pool-lock/name)"
          gcloud_auth "${cluster_name}"

          helm uninstall -n external-db postgresql
          kubectl delete namespace external-db

  - put: destroy-pool
    params:
      add: ready-pool

  - put: ready-pool
    params:
      remove: ready-pool

- name: validate-external-blobstore
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
      passed:
      - test-vendir-sync
      - run-unit-tests
      trigger: true
    - get: cf-for-k8s-ci

  - put: ready-pool
    params:
      acquire: true

  - task: display-cluster-info
    file: cf-for-k8s-ci/ci/tasks/display-gke-cluster-info/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))

  - task: install-minio
    file: cf-for-k8s-ci/ci/tasks/install-minio/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))

  - task: install-cf
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      pool-lock: ready-pool
      cf-for-k8s: cf-for-k8s-develop
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
      APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
      USE_EXTERNAL_BLOBSTORE: true
      DOMAIN: k8s-dev.relint.rocks

  - task: run-smoke-test
    file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      SMOKE_TEST_SKIP_SSL: false

  - task: delete-cf
    file: cf-for-k8s-ci/ci/tasks/delete-cf/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))

  - task: delete-minio
    input_mapping:
      pool-lock: ready-pool
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-ci
      - name: pool-lock
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          source cf-for-k8s-ci/ci/helpers/gke.sh

          cluster_name="$(cat pool-lock/name)"
          gcloud_auth "${cluster_name}"

          helm uninstall -n external-blobstore minio
          kubectl delete namespace external-blobstore

  - put: destroy-pool
    params:
      add: ready-pool

  - put: ready-pool
    params:
      remove: ready-pool

- name: validate-rds
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
      passed:
      - test-vendir-sync
      - run-unit-tests
      trigger: true
    - get: cf-for-k8s-ci
    - get: terraform-rds

  - put: ready-pool
    params:
      acquire: true

  - task: display-cluster-info
    file: cf-for-k8s-ci/ci/tasks/display-gke-cluster-info/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))

  - task: initialize-rds
    file: cf-for-k8s-ci/ci/tasks/initialize-rds/task.yml
    params:
      PGPASSWORD: ((ci_k8s_aws_rds_database_password))

  - task: install-cf
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      pool-lock: ready-pool
      cf-for-k8s: cf-for-k8s-develop
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
      APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
      USE_EXTERNAL_DB: true
      DOMAIN: k8s-dev.relint.rocks

  - task: run-rds-validation-test
    file: cf-for-k8s-ci/ci/tasks/run-external-db-validation-test/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      PGPASSWORD: ((ci_k8s_aws_rds_database_password))

  - task: run-smoke-test
    file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      SMOKE_TEST_SKIP_SSL: false

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      APP_NAME: lingering-node-app
      VERIFY_EXISTING_APP: false

  - task: delete-cf
    file: cf-for-k8s-ci/ci/tasks/delete-cf/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))

  - in_parallel:
    - do:
      - put: destroy-pool
        params:
          add: ready-pool

      - put: ready-pool
        params:
          remove: ready-pool

    - task: delete-rds
      file: cf-for-k8s-ci/ci/tasks/delete-rds/task.yml
      params:
        PGPASSWORD: ((ci_k8s_aws_rds_database_password))

- name: validate-cf-for-k8s-gke-s3
  serial: true
  public: true
  plan:
    - in_parallel:
      - get: cf-for-k8s-develop
        passed:
          - test-vendir-sync-on-cf-for-k8s
          - run-unit-tests
        trigger: true
      - get: cf-for-k8s-ci
      - get: cf-for-k8s-s3-terraform-templates

    - put: ready-pool
      params:
        acquire: true

    - task: create-s3-tf-vars-file
      file: cf-for-k8s-ci/ci/tasks/create-s3-tf-vars-file/task.yml
      params:
        AWS_ACCESS_KEY_ID: ((ci_k8s_aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((ci_k8s_aws_secret_access_key))
        AWS_REGION: ((ci_k8s_aws_region))

    - put: terraform-s3
      params:
        terraform_source: cf-for-k8s-s3-terraform-templates/deploy/s3/terraform
        delete_on_failure: true
        var_files: [tf-vars-s3/input.tfvars]

    - task: install-s3-buckets
      params:
        AWS_ACCESS_KEY_ID: ((ci_k8s_aws_access_key_id))
        AWS_SECRET_ACCESS_KEY: ((ci_k8s_aws_secret_access_key))
        AWS_REGION: ((ci_k8s_aws_region))
      file: cf-for-k8s-ci/ci/tasks/install-s3-buckets/task.yml

    - task: install-cf
      input_mapping:
        pool-lock: ready-pool
        cf-for-k8s: cf-for-k8s-develop
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
        APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
        USE_EXTERNAL_BLOBSTORE: true
        DOMAIN: k8s-dev.relint.rocks
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml

    - task: run-external-blobstore-validation-test
      file: cf-for-k8s-ci/ci/tasks/run-external-blobstore-validation-test/task.yml
      params:
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        EXTERNAL_BLOBSTORE: "s3"
      input_mapping:
        pool-lock: ready-pool
        cf-for-k8s: cf-for-k8s-develop

    - task: delete-cf
      input_mapping:
        pool-lock: ready-pool
      config:
        <<: *common-task-config
        inputs:
          - name: cf-for-k8s-ci
          - name: pool-lock
        params:
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        run:
          path: /bin/bash
          args:
            - -ec
            - |
              source cf-for-k8s-ci/ci/helpers/gke.sh

              cluster_name="$(cat pool-lock/name)"
              gcloud_auth "${cluster_name}"

              kapp delete -a cf --yes

    - put: destroy-pool
      params:
        add: ready-pool

    - put: ready-pool
      params:
        remove: ready-pool

  ensure:
    put: terraform-s3
    params:
      terraform_source: cf-for-k8s-s3-terraform-templates/deploy/s3/terraform
      var_files: [tf-vars-s3/input.tfvars]
      action: destroy
    get_params:
      action: destroy

- name: validate-oldest-k8s
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
      passed:
      - test-vendir-sync
      - run-unit-tests
      trigger: true
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-kind-gcp-terraform-templates

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: oldest_version

    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: validate-newest-k8s
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
      passed:
      - test-vendir-sync
      - run-unit-tests
      trigger: true
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-kind-gcp-terraform-templates

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: newest_version

    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: promote-main-deliver-stories
  serial: true
  public: true
  plan:
  - get: cf-for-k8s-develop
    passed:
    - validate-gke
    - validate-upgrade
    - validate-rds
    - validate-external-db
    - validate-external-blobstore
    - validate-oldest-k8s
    - validate-newest-k8s
    - run-cats
    trigger: true

  - put: cf-for-k8s-main-push
    params:
      repository: cf-for-k8s-develop

  - put: deliver-tracker-stories
    params:
      repos:
      - cf-for-k8s-develop
