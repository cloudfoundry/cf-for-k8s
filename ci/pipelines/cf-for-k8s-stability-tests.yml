---
groups:
- name: values-rotation
  jobs:
  - validate-values-rotation-redeploy
- name: stability-checks-and-slis
  jobs:
  - install-and-smoketest-sli
  - long-lived-env-sli
- name: long-lived-env
  jobs:
  - manual-redeploy-long-lived-env-with-latest-master
  - deploy-long-lived-node-app
  - upgrade-long-lived-env-to-latest-master

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

resources:
- name: cf-for-k8s-master
  type: git
  icon: github
  source:
    branch: master
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))

- name: cf-for-k8s-ci
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
      - ci/**

- name: runtime-ci
  type: git
  icon: github
  source:
    branch: master
    uri: https://github.com/cloudfoundry/runtime-ci.git

- name: weekday-pm
  type: time
  icon: clock-outline
  source:
    days: [Monday, Tuesday, Wednesday, Thursday, Friday]
    start: 6:00 PM
    stop: 7:00 PM
    location: America/Los_Angeles

- name: terraform-long-lived-sli
  type: terraform
  source:
    env_name: long-lived-sli
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))

- name: relint-envs
  type: git
  source:
    branch: master
    uri: git@github.com:cloudfoundry/relint-envs.git
    private_key: ((relint-ci-repository_readwrite_deploy_key.private_key))

- name: every-minute
  type: time
  icon: clock-outline
  source:
    interval: 1m

- name: every-20-minutes
  type: time
  icon: clock-outline
  source:
    interval: 20m

- name: ready-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: k8s-dev/ready
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: destroy-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: k8s-dev/destroy
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: stability-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: cf-for-k8s-stability
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

# Extract common platform and image_resource details so task configs can be more concise
x-config: &common-task-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: relintdockerhubpushbot/cf-for-k8s-ci

jobs:
- name: validate-values-rotation-redeploy
  serial: true
  public: true
  plan:
    - in_parallel:
      - get: cf-for-k8s-master
      - get: cf-for-k8s-ci
      - get: weekday-pm
        trigger: true

    - put: ready-pool
      params: {acquire: true}

    - task: fresh-install-cf
      input_mapping:
        pool-lock: ready-pool
      config:
        <<: *common-task-config
        inputs:
          - name: cf-for-k8s-master
          - name: cf-for-k8s-ci
          - name: pool-lock
        outputs:
          - name: env-metadata
        params:
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
          DOMAIN: k8s-dev.relint.rocks
        run:
          path: /bin/bash
          args:
            - -ec
            - |
              source cf-for-k8s-ci/ci/helpers/gke.sh
              cluster_name="$(cat pool-lock/name)"
              gcloud_auth "${cluster_name}"

              DNS_DOMAIN="${cluster_name}.${DOMAIN}"

              echo "Generating install values..."
              cf-for-k8s-master/hack/generate-values.sh --cf-domain "${DNS_DOMAIN}" --gcr-service-account-json gcp-service-account.json > cf-install-values.yml
              echo "istio_static_ip: $(jq -r '.lb_static_ip' pool-lock/metadata)" >> cf-install-values.yml

              echo "Installing CF..."
              kapp deploy -a cf -f <(ytt -f cf-for-k8s-master/config -f cf-install-values.yml) -y

              bosh interpolate --path /cf_admin_password cf-install-values.yml > env-metadata/cf-admin-password.txt
              echo "${DNS_DOMAIN}" > env-metadata/dns-domain.txt
              grep -E "db_admin_password|capi_db_password|uaa_db_password|blobstore_secret_key|cf_admin_password" "/tmp/${cluster_name}.${DOMAIN}/cf-vars.yaml" > env-metadata/cf-vars.yaml

    - task: push-test-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      params:
        APP_NAME: jp-node-app
        VERIFY_EXISTING_APP: false
      input_mapping:
        cf-for-k8s: cf-for-k8s-master

    - task: upgrade-cf-new-values
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-master
        pool-lock: ready-pool
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        DOMAIN: k8s-dev.relint.rocks
        UPGRADE: true
        UPTIMER: true
        EMIT_UPTIMER_METRICS_TO_WAVEFRONT: true
        WAVEFRONT_API_KEY: ((wavefront_ci_service_account))
        WAVEFRONT_API_ENDPOINT: "https://vmwareprod.wavefront.com/report"
        SOURCE_PIPELINE: values-rotation-redeploy
    - in_parallel:
        - task: run-smoke-tests
          file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
          input_mapping:
            cf-for-k8s: cf-for-k8s-master
          params:
            SMOKE_TEST_SKIP_SSL: false
        - task: verify-existing-app
          file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
          params:
            APP_NAME: jp-node-app
            VERIFY_EXISTING_APP: true
          input_mapping:
            cf-for-k8s: cf-for-k8s-master

    - task: delete-cf
      input_mapping:
        pool-lock: ready-pool
      config:
        <<: *common-task-config
        inputs:
          - name: cf-for-k8s-ci
          - name: pool-lock
        params:
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        run:
          path: /bin/bash
          args:
            - -ec
            - |
              source cf-for-k8s-ci/ci/helpers/gke.sh
              cluster_name="$(cat pool-lock/name)"
              gcloud_auth "${cluster_name}"

              kapp delete -a cf --yes

    - put: destroy-pool
      params:
        add: ready-pool

    - put: ready-pool
      params:
        remove: ready-pool


- name: install-and-smoketest-sli
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-master
    - get: cf-for-k8s-ci
    - get: every-20-minutes
      trigger: true

  - put: stability-pool
    params:
      acquire: true
  - do:
    - task: delete-cf
      input_mapping:
        pool-lock: stability-pool
      config:
        <<: *common-task-config
        inputs:
        - name: cf-for-k8s-ci
        - name: pool-lock
        params:
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            source cf-for-k8s-ci/ci/helpers/gke.sh

            cluster_name="$(cat pool-lock/name)"
            gcloud_auth "${cluster_name}"

            kapp delete -a cf --yes

    - task: install-cf
      input_mapping:
        pool-lock: stability-pool
      config:
        <<: *common-task-config
        inputs:
        - name: cf-for-k8s-master
        - name: cf-for-k8s-ci
        - name: pool-lock
        outputs:
        - name: env-metadata
        params:
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            source cf-for-k8s-ci/ci/helpers/gke.sh

            cluster_name="$(cat pool-lock/name)"
            gcloud_auth "${cluster_name}"

            export DNS_DOMAIN="${cluster_name}.((ci_k8s_root_domain))"
            cf-for-k8s-master/hack/confirm-network-policy.sh "${cluster_name}" '((ci_k8s_gcp_project_zone))'

            echo "Generating install values..."
            cf-for-k8s-master/hack/generate-values.sh --cf-domain "${DNS_DOMAIN}" --gcr-service-account-json gcp-service-account.json > cf-install-values.yml
            echo "istio_static_ip: $(jq -r '.lb_static_ip' pool-lock/metadata)" >> cf-install-values.yml

            echo "Installing CF..."
            kapp deploy -a cf -f <(ytt -f cf-for-k8s-master/config -f cf-install-values.yml) -y

            bosh interpolate --path /default_ca/ca /tmp/${DNS_DOMAIN}/cf-vars.yaml > env-metadata/default_ca.ca
            bosh interpolate --path /cf_admin_password cf-install-values.yml > env-metadata/cf-admin-password.txt
            echo "${DNS_DOMAIN}" > env-metadata/dns-domain.txt

    - task: run-smoke-test
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      params:
        SMOKE_TEST_SKIP_SSL: false
      input_mapping:
        cf-for-k8s: cf-for-k8s-master

    - task: delete-cf
      input_mapping:
        pool-lock: stability-pool
      config:
        <<: *common-task-config
        inputs:
        - name: cf-for-k8s-ci
        - name: pool-lock
        params:
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            source cf-for-k8s-ci/ci/helpers/gke.sh

            cluster_name="$(cat pool-lock/name)"
            gcloud_auth "${cluster_name}"

            kapp delete -a cf --yes

    ensure:
      try:
        put: stability-pool
        params:
          release: stability-pool

- name: long-lived-env-sli
  serial: true
  serial_groups: [long-lived-env]
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-master
    - get: runtime-ci
    - get: every-minute
      trigger: true

  - task: run-smoke-test
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-master
      - name: runtime-ci
      params:
        CF_ADMIN_PASSWORD: ((ll_dep_cf_admin_pass))
      run:
        path: /bin/sh
        args:
        - -ec
        - |
          source runtime-ci/tasks/shared-functions
          DNS_DOMAIN="long-lived-sli.((ci_k8s_root_domain))"
          export SMOKE_TEST_API_ENDPOINT="https://api.${DNS_DOMAIN}"
          export SMOKE_TEST_APPS_DOMAIN="apps.${DNS_DOMAIN}"
          export SMOKE_TEST_USERNAME=admin
          export SMOKE_TEST_PASSWORD=${CF_ADMIN_PASSWORD}
          export SMOKE_TEST_SKIP_SSL=true

          set +e
          cf-for-k8s-master/hack/run-smoke-tests.sh
          smoke_tests_exit_code=$?
          set -e
          if [[ ${smoke_tests_exit_code} == 0 ]]; then
            sli_status=1
          else
            sli_status=0
          fi
          export METRIC_NAME=smoke_test_sli.status
          export METRIC_VALUE=${sli_status}
          export METRIC_SOURCE_NAME=long_lived
          export WAVEFRONT_API_KEY=((wavefront_ci_service_account))
          export WAVEFRONT_API_ENDPOINT="https://vmwareprod.wavefront.com/report"
          echo "Emitting result \"${METRIC_VALUE}\" to wavefront"
          emit_metric "${METRIC_NAME}" "${METRIC_VALUE}" ""

          exit ${smoke_tests_exit_code}

- name: upgrade-long-lived-env-to-latest-master
  serial: true
  serial_groups: [long-lived-env]
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-master
    - get: cf-for-k8s-ci
    - get: relint-envs
    - get: weekday-pm
      trigger: true
    - get: terraform-long-lived-sli

  - task: install-cf
    input_mapping:
      pool-lock: stability-pool
      terraform: terraform-long-lived-sli
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-master
      - name: cf-for-k8s-ci
      - name: relint-envs
      - name: terraform
      outputs:
      - name: relint-envs-updated
      params:
        CLUSTER_NAME: long-lived-sli
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          source cf-for-k8s-ci/ci/helpers/gke.sh
          gcloud_auth "${CLUSTER_NAME}"

          export DNS_DOMAIN="${CLUSTER_NAME}.((ci_k8s_root_domain))"

          echo "replacing repository prefix with repo whose images are not cleaned up"
          export long_lived_repository_prefix="gcr.io/$( bosh interpolate gcp-service-account.json --path=/project_id )/cf-workloads-long-lived"

          echo "Using cf-vars from relint-envs/k8s-environments/long-lived-sli/cf-vars.yaml..."
          mkdir -p "/tmp/${DNS_DOMAIN}"
          cp relint-envs/k8s-environments/long-lived-sli/cf-vars.yaml "/tmp/${DNS_DOMAIN}/cf-vars.yaml"

          echo "Generating install values..."
          cf-for-k8s-master/hack/generate-values.sh --cf-domain "${DNS_DOMAIN}" --gcr-service-account-json gcp-service-account.json > cf-install-values.yml
          sed -i.bak 's/\(cf_admin_password:\).*$/\1 ((ll_dep_cf_admin_pass))/' cf-install-values.yml
          sed -i.bak 's/\(cf_admin_password:\).*$/\1 ((ll_dep_cf_admin_pass))/' "/tmp/${DNS_DOMAIN}/cf-vars.yaml"
          sed -i.bak "s=\(repository_prefix:\).*$=\1 $long_lived_repository_prefix=" cf-install-values.yml
          echo "istio_static_ip: $(jq -r '.lb_static_ip' terraform/metadata)" >> cf-install-values.yml

          echo "Installing CF..."
          kapp deploy -a cf -f <(ytt -f cf-for-k8s-master/config -f cf-install-values.yml) -y

          source cf-for-k8s-ci/ci/helpers/env-git.sh
          commit-long-lived-sli-cf-vars

  - put: relint-envs
    params:
      repository: relint-envs-updated
      rebase: true


- name: manual-redeploy-long-lived-env-with-latest-master
  serial: true
  serial_groups: [long-lived-env]
  public: true
  plan:
    - in_parallel:
        - get: cf-for-k8s-master
        - get: cf-for-k8s-ci
        - get: relint-envs
        - get: terraform-long-lived-sli

    - task: delete-cf
      config:
        <<: *common-task-config
        inputs:
          - name: cf-for-k8s-ci
        params:
          CLUSTER_NAME: long-lived-sli
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        run:
          path: /bin/bash
          args:
            - -ec
            - |
              source cf-for-k8s-ci/ci/helpers/gke.sh
              gcloud_auth "${CLUSTER_NAME}"

              kapp delete -a cf --yes

    - task: install-cf
      input_mapping:
        pool-lock: stability-pool
        terraform: terraform-long-lived-sli
      config:
        <<: *common-task-config
        inputs:
          - name: cf-for-k8s-master
          - name: cf-for-k8s-ci
          - name: relint-envs
          - name: terraform
        outputs:
          - name: env-metadata
          - name: relint-envs-updated
        params:
          CLUSTER_NAME: long-lived-sli
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        run:
          path: /bin/bash
          args:
            - -ec
            - |
              source cf-for-k8s-ci/ci/helpers/gke.sh
              gcloud_auth "${CLUSTER_NAME}"

              export DNS_DOMAIN="${CLUSTER_NAME}.((ci_k8s_root_domain))"

              echo "replacing repository prefix with repo whose images are not cleaned up"
              export long_lived_repository_prefix="gcr.io/$( bosh interpolate gcp-service-account.json --path=/project_id )/cf-workloads-long-lived"
              echo "Generating install values..."
              cf-for-k8s-master/hack/generate-values.sh --cf-domain "${DNS_DOMAIN}" --gcr-service-account-json gcp-service-account.json > cf-install-values.yml
              sed -i.bak 's/\(cf_admin_password:\).*$/\1 ((ll_dep_cf_admin_pass))/' cf-install-values.yml
              sed -i.bak 's/\(cf_admin_password:\).*$/\1 ((ll_dep_cf_admin_pass))/' "/tmp/${DNS_DOMAIN}/cf-vars.yaml"

              sed -i.bak "s=\(repository_prefix:\).*$=\1 $long_lived_repository_prefix=" cf-install-values.yml
              echo "istio_static_ip: $(jq -r '.lb_static_ip' terraform/metadata)" >> cf-install-values.yml

              echo "Installing CF..."
              kapp deploy -a cf -f <(ytt -f cf-for-k8s-master/config -f cf-install-values.yml) -y

              echo "((ll_dep_cf_admin_pass))" > env-metadata/cf-admin-password.txt
              echo "${DNS_DOMAIN}" > env-metadata/dns-domain.txt

              source cf-for-k8s-ci/ci/helpers/env-git.sh
              commit-long-lived-sli-cf-vars

    - put: relint-envs
      params:
        repository: relint-envs-updated
        rebase: true

- name: deploy-long-lived-node-app
  serial: true
  serial_groups: [long-lived-env]
  public: true
  plan:
    - in_parallel:
        - get: cf-for-k8s-master
          passed: [ manual-redeploy-long-lived-env-with-latest-master ]
          trigger: true
        - get: cf-for-k8s-ci
    - task: get-env-metadata
      config:
        <<: *common-task-config
        outputs:
          - name: env-metadata
        params:
          CLUSTER_NAME: long-lived-sli
        run:
          path: /bin/bash
          args:
            - -ec
            - |
              export DNS_DOMAIN="${CLUSTER_NAME}.((ci_k8s_root_domain))"
              echo "((ll_dep_cf_admin_pass))" > env-metadata/cf-admin-password.txt
              echo "${DNS_DOMAIN}" > env-metadata/dns-domain.txt
    - task: push-test-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      params:
        APP_NAME: long-lived-node-app
        VERIFY_EXISTING_APP: false
      input_mapping:
        cf-for-k8s: cf-for-k8s-master
