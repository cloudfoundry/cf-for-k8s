---
groups:
- name: pr-validation
  jobs:
  - fail-prs-to-cf-for-k8s-master
  - pass-prs-to-cf-for-k8s-develop
  - run-unit-tests-on-pr
  - validate-pr-on-gke
  - validate-pr-on-gke-external-db
  - validate-pr-on-newest-k8s-kind
  - validate-pr-on-oldest-k8s-kind
  - test-vendir-sync-on-cf-for-k8s-pr

- name: auto-bumps

# Extract common platform and image_resource details so task configs can be more concise
x-config: &common-task-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: relintdockerhubpushbot/cf-for-k8s-ci

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

resources:
- name: cf-for-k8s-develop
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    ignore_paths:
      - ci/**

- name: cf-for-k8s-pr-master
  type: pull-request
  icon: github
  source:
    access_token: ((github_status_bot_repo_access_token))
    repository: cloudfoundry/cf-for-k8s
    disable_forks: false
    base_branch: master

- name: cf-for-k8s-pr-develop
  type: pull-request
  icon: github
  source:
    access_token: ((github_status_bot_repo_access_token))
    repository: cloudfoundry/cf-for-k8s
    disable_forks: false
    base_branch: develop

- name: cf-for-k8s-pr-all-branches-and-forks
  type: pull-request
  icon: github
  source:
    access_token: ((github_status_bot_repo_access_token))
    repository: cloudfoundry/cf-for-k8s
    disable_forks: false

- name: cf-for-k8s-ci
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
      - ci/**

- name: runtime-ci
  type: git
  icon: github
  source:
    branch: master
    uri: https://github.com/cloudfoundry/runtime-ci.git

- name: ready-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: k8s-dev/ready
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: destroy-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: k8s-dev/destroy
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: terraform
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))

- name: cf-for-k8s-kind-gcp-terraform-templates
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-for-k8s
    branch: develop
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
      - deploy/kind-on-gcp/terraform/**

- name: cf-for-k8s-gke-terraform-templates
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-for-k8s
    branch: develop
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
      - deploy/gke/terraform/**

jobs:
- name: fail-prs-to-cf-for-k8s-master
  public: true
  plan:
    - in_parallel:
        - get: cf-for-k8s-pr-master
          trigger: true
          version: every
        - get: runtime-ci

    - task: write-pr-check-failure-comment
      file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
      input_mapping:
        pull-request: cf-for-k8s-pr-master

    - put: cf-for-k8s-pr-master
      params:
        path: cf-for-k8s-pr-master
        status: failure
        context: ((pr_context))
        comment_file: pull-request-comment/comment

- name: pass-prs-to-cf-for-k8s-develop
  public: true
  plan:
    - get: cf-for-k8s-pr-develop
      trigger: true
      version: every

    - put: cf-for-k8s-pr-develop
      params:
        path: cf-for-k8s-pr-develop
        status: success
        context: ((pr_context))

- name: run-unit-tests-on-pr
  public: true
  plan:
    - in_parallel:
        - get: cf-for-k8s-pr-all-branches-and-forks
          trigger: true
          version: every
        - get: cf-for-k8s-ci
        - get: runtime-ci

    - put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: pending
        context: run-unit-tests

    - task: run-unit-tests
      file: cf-for-k8s-ci/ci/tasks/run-unit-tests/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks

      on_failure:
        do:
          - task: write-pr-check-failure-comment
            file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
            input_mapping:
              pull-request: cf-for-k8s-pr-all-branches-and-forks

          - put: cf-for-k8s-pr-all-branches-and-forks
            params:
              path: cf-for-k8s-pr-all-branches-and-forks
              status: failure
              context: run-unit-tests
              comment_file: pull-request-comment/comment

      on_success:
        put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: success
          context: run-unit-tests


- name: test-vendir-sync-on-cf-for-k8s-pr
  public: true
  plan:
    - in_parallel:
        - get: runtime-ci
        - get: cf-for-k8s-pr-all-branches-and-forks
          params:
            integration_tool: rebase
          trigger: true
          version: every
        - get: cf-for-k8s-ci

    - put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: pending
        context: check-vendir-sync

    - task: check-vendir-sync
      file: cf-for-k8s-ci/ci/tasks/check-vendir-sync/task.yml
      input_mapping:
        ci-tasks: cf-for-k8s-ci
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      params:
        VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))

      on_failure:
        do:
          - task: write-pr-check-failure-comment
            file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
            input_mapping:
              pull-request: cf-for-k8s-pr-all-branches-and-forks

          - put: cf-for-k8s-pr-all-branches-and-forks
            params:
              path: cf-for-k8s-pr-all-branches-and-forks
              status: failure
              context: check-vendir-sync
              comment_file: pull-request-comment/comment

      on_success:
        put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: success
          context: check-vendir-sync

- name: validate-pr-on-gke
  public: true
  plan:
    - in_parallel:
        - get: cf-for-k8s-pr-all-branches-and-forks
          params:
            integration_tool: rebase
          trigger: true
          version: every
          passed:
            - run-unit-tests-on-pr
            - test-vendir-sync-on-cf-for-k8s-pr
        - get: cf-for-k8s-ci
        - get: cf-for-k8s-develop
        - get: runtime-ci

    - put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: pending
        context: upgrade-check-uptime

    - put: ready-pool
      params: {acquire: true}

    - do:
        - task: install-cf-develop
          file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
          input_mapping:
            cf-for-k8s: cf-for-k8s-develop
            pool-lock: ready-pool
          params:
            GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
            GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
            GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
            DOMAIN: k8s-dev.relint.rocks
            USE_EXTERNAL_APP_REGISTRY: true
            APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
            APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
            APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
            APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))

        - task: push-test-app
          file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
          input_mapping:
            cf-for-k8s: cf-for-k8s-develop
          params:
            APP_NAME: jp-node-app
            VERIFY_EXISTING_APP: false

        - task: upgrade-to-pr
          file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
          input_mapping:
            cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
            pool-lock: ready-pool
          params:
            GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
            GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
            GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
            UPGRADE: true
            UPTIMER: true
            DOMAIN: k8s-dev.relint.rocks
            USE_EXTERNAL_APP_REGISTRY: true
            APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
            APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
            APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
            APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))

        - in_parallel:
            - task: run-smoke-tests
              file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
              input_mapping:
                cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
              params:
                SMOKE_TEST_SKIP_SSL: false
            - task: verify-existing-app
              file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
              input_mapping:
                cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
              params:
                APP_NAME: jp-node-app
                VERIFY_EXISTING_APP: true

      on_failure:
        do:
          - task: write-pr-check-failure-comment
            file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
            input_mapping:
              pull-request: cf-for-k8s-pr-all-branches-and-forks

          - put: cf-for-k8s-pr-all-branches-and-forks
            params:
              path: cf-for-k8s-pr-all-branches-and-forks
              status: failure
              context: upgrade-check-uptime
              comment_file: pull-request-comment/comment

      on_success:
        put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: success
          context: upgrade-check-uptime

      ensure:
        do:
          - task: delete-cf
            input_mapping:
              pool-lock: ready-pool
            config:
              <<: *common-task-config
              inputs:
                - name: cf-for-k8s-ci
                - name: pool-lock
              params:
                GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
                GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
                GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
              run:
                path: /bin/bash
                args:
                  - -ec
                  - |
                    source cf-for-k8s-ci/ci/helpers/gke.sh

                    cluster_name="$(cat pool-lock/name)"
                    gcloud_auth "${cluster_name}"

                    kapp delete -a cf --yes

          - put: destroy-pool
            params:
              add: ready-pool

          - put: ready-pool
            params:
              remove: ready-pool

- name: validate-pr-on-gke-external-db
  serial: true
  public: true
  plan:
    - in_parallel:
        - get: cf-for-k8s-pr-all-branches-and-forks
          params:
            integration_tool: rebase
          trigger: true
          version: every
          passed:
            - run-unit-tests-on-pr
            - test-vendir-sync-on-cf-for-k8s-pr
        - get: cf-for-k8s-ci
        - get: cf-for-k8s-develop
        - get: cf-for-k8s-gke-terraform-templates
        - get: runtime-ci

    - put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: pending
        context: upgrade-check-uptime
    - task: create-tf-vars-file
      config:
        <<: *common-task-config
        outputs:
          - name: tf-vars
        params:
          SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
        run:
          path: /bin/bash
          args:
            - -ec
            - |
              echo "pr-validation" > tf-vars/env-name.txt
              cat > tf-vars/input.tfvars <<EOT
              project = "((ci_k8s_gcp_project_name))"
              region = "((ci_k8s_gcp_project_region))"
              zone = "((ci_k8s_gcp_project_zone))"
              service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
              env_name = "$(cat tf-vars/env-name.txt)"
              env_dns_domain = "$(cat tf-vars/env-name.txt).((ci_k8s_root_domain))"
              dns_zone_name = "((ci_k8s_dns_zone_name))"
              EOT
    - put: terraform
      params:
        terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
        env_name_file: tf-vars/env-name.txt
        delete_on_failure: true
        var_files: [tf-vars/input.tfvars]

    - task: install-postgres
      params:
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      file: cf-for-k8s-ci/ci/tasks/install-postgres/task.yml
    - do:
        - task: install-cf-develop
          params:
            GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
            GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
            GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
            DOMAIN: cf-for-k8s.relint.rocks
            USE_EXTERNAL_APP_REGISTRY: true
            APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
            APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
            APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
            APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
            USE_EXTERNAL_DB: "true"
          file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
          input_mapping:
            cf-for-k8s: cf-for-k8s-develop

    - task: push-test-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      params:
        APP_NAME: jp-node-app
        VERIFY_EXISTING_APP: false
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop

    - task: upgrade-to-pr
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        UPGRADE: true
        UPTIMER: true
        DOMAIN: cf-for-k8s.relint.rocks
        USE_EXTERNAL_APP_REGISTRY: true
        APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
        APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
        USE_EXTERNAL_DB: "true"

    - in_parallel:
        - task: run-smoke-tests
          file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
          params:
            SMOKE_TEST_SKIP_SSL: false
          input_mapping:
            cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
        - task: verify-existing-app
          file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
          params:
            APP_NAME: jp-node-app
            VERIFY_EXISTING_APP: true
          input_mapping:
            cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks

  on_failure:
    do:
      - task: write-pr-check-failure-comment
        file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
        input_mapping:
          pull-request: cf-for-k8s-pr-all-branches-and-forks

      - put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: failure
          context: upgrade-check-uptime
          comment_file: pull-request-comment/comment

  on_success:
    put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: success
      context: upgrade-check-uptime

  ensure:
    do:
      - task: delete-cf
        config:
          <<: *common-task-config
          inputs:
            - name: cf-for-k8s-ci
            - name: tf-vars
          params:
            GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
            GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
            GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
          run:
            path: /bin/bash
            args:
              - -ec
              - |
                source cf-for-k8s-ci/ci/helpers/gke.sh
                cluster_name="$(cat tf-vars/env-name.txt)"
                gcloud_auth "${cluster_name}"
                kapp delete -a cf --yes

      - put: terraform
        params:
          terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
          env_name_file: tf-vars/env-name.txt
          action: destroy
          var_files: [tf-vars/input.tfvars]
        get_params:
          action: destroy


- name: validate-pr-on-newest-k8s-kind
  plan:
    - in_parallel:
        - get: cf-for-k8s-pr-all-branches-and-forks
          trigger: true
          version: every
          passed:
            - run-unit-tests-on-pr
            - test-vendir-sync-on-cf-for-k8s-pr
        - get: cf-for-k8s-ci
        - get: cf-for-k8s-kind-gcp-terraform-templates
        - get: runtime-ci

    - put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: pending
        context: newest-supported-k8s-version

    - task: create-tf-vars-file
      file: cf-for-k8s-ci/ci/tasks/create-tf-vars-file/task.yml
      params:
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_REGION: ((ci_k8s_gcp_project_region))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))

    - put: terraform
      params:
        terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        delete_on_failure: true
        var_files: [tf-vars/input.tfvars]

    - do:
        - task: create-kind-cluster
          attempts: 5
          input_mapping:
            cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
          file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
          params:
            GCP_KEY: ((ci_k8s_gcp_service_account_json))
            GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
            VERSION_SELECTOR: newest_version

        - task: install-cf
          input_mapping:
            cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
          file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
          params:
            GCP_KEY: ((ci_k8s_gcp_service_account_json))
            GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

        - task: run-smoke-tests
          input_mapping:
            cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
          file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
          params:
            GCP_KEY: ((ci_k8s_gcp_service_account_json))
            GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

      on_failure:
        do:
          - task: write-pr-check-failure-comment
            file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
            input_mapping:
              pull-request: cf-for-k8s-pr-all-branches-and-forks

          - put: cf-for-k8s-pr-all-branches-and-forks
            params:
              path: cf-for-k8s-pr-all-branches-and-forks
              status: failure
              context: newest-supported-k8s-version
              comment_file: pull-request-comment/comment

      on_success:
        put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: success
          context: newest-supported-k8s-version

      ensure:
        put: terraform
        params:
          terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
          env_name_file: tf-vars/env-name.txt
          action: destroy
          var_files: [tf-vars/input.tfvars]
        get_params:
          action: destroy

- name: validate-pr-on-oldest-k8s-kind
  plan:
    - in_parallel:
        - get: cf-for-k8s-pr-all-branches-and-forks
          trigger: true
          version: every
          passed:
            - run-unit-tests-on-pr
            - test-vendir-sync-on-cf-for-k8s-pr
        - get: cf-for-k8s-ci
        - get: cf-for-k8s-kind-gcp-terraform-templates
        - get: runtime-ci

    - put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: pending
        context: oldest-supported-k8s-version

    - task: create-tf-vars-file
      file: cf-for-k8s-ci/ci/tasks/create-tf-vars-file/task.yml
      params:
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_REGION: ((ci_k8s_gcp_project_region))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))

    - put: terraform
      params:
        terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        delete_on_failure: true
        var_files: [tf-vars/input.tfvars]

    - do:
        - task: create-kind-cluster
          attempts: 5
          input_mapping:
            cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
          file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
          params:
            GCP_KEY: ((ci_k8s_gcp_service_account_json))
            GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
            VERSION_SELECTOR: oldest_version

        - task: install-cf
          input_mapping:
            cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
          file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
          params:
            GCP_KEY: ((ci_k8s_gcp_service_account_json))
            GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

        - task: run-smoke-tests
          input_mapping:
            cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
          file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
          params:
            GCP_KEY: ((ci_k8s_gcp_service_account_json))
            GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

      on_failure:
        do:
          - task: write-pr-check-failure-comment
            file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
            input_mapping:
              pull-request: cf-for-k8s-pr-all-branches-and-forks

          - put: cf-for-k8s-pr-all-branches-and-forks
            params:
              path: cf-for-k8s-pr-all-branches-and-forks
              status: failure
              context: oldest-supported-k8s-version
              comment_file: pull-request-comment/comment

      on_success:
        put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: success
          context: oldest-supported-k8s-version

      ensure:
        put: terraform
        params:
          terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
          env_name_file: tf-vars/env-name.txt
          action: destroy
          var_files: [tf-vars/input.tfvars]
        get_params:
          action: destroy
