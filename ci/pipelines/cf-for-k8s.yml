---
groups:
- name: validation-checks
  jobs:
  - run-unit-tests
  - branch-freshness
  - test-vendir-sync-on-cf-for-k8s
  - validate-cf-for-k8s-gke
  - validate-cf-for-k8s-oldest
  - validate-cf-for-k8s-newest
  - validate-cf-for-k8s-gke-external-db
  - validate-cf-for-k8s-gke-rds
  - promote-master-deliver-stories
- name: stability-checks-and-slis
  jobs:
  - install-and-smoketest-sli
  - long-lived-env-sli
  - manual-redeploy-long-lived-env-with-latest-master
  - upgrade-long-lived-env-to-latest-master
  - validate-azure
  - validate-cf-for-k8s-upgrade
  - update-last-valid-commit-to-head-of-master
  - validate-values-rotation-redeploy
- name: pr-checks
  jobs:
  - fail-prs-to-cf-for-k8s-master
  - pass-prs-to-cf-for-k8s-develop
  - run-unit-tests-on-pr
  - validate-pr-on-gke
  - validate-pr-on-gke-external-db
  - validate-pr-on-gke-rds
  - validate-pr-on-newest-k8s-kind
  - validate-pr-on-oldest-k8s-kind
  - test-vendir-sync-on-cf-for-k8s-pr
- name: docker-images
  jobs:
  - build-cf-for-k8s-ci-image
  - build-cf-for-k8s-azure-image
- name: infrastructure
  jobs:
  - add-stability-cluster-lock
  - create-stability-cluster
  - destroy-stability-cluster
  - remove-stability-cluster-lock
  - create-long-lived-sli-cluster
  - destroy-long-lived-sli-cluster
  - clean-registry
  - create-rds-database
  - destroy-rds-database

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

resources:
- name: cf-for-k8s-develop
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    ignore_paths:
      - ci/**

- name: cf-for-k8s-all-branches
  type: git
  icon: github
  source:
    branch: develop
    uri: https://github.com/cloudfoundry/cf-for-k8s.git

- name: cf-for-k8s-ci
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
      - ci/**

- name: cf-for-k8s-ci-dockerfile
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
      - ci/dockerfiles/cf-for-k8s-ci/Dockerfile

- name: cf-for-k8s-azure-dockerfile
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
      - ci/dockerfiles/cf-for-k8s-azure/Dockerfile

- name: cf-for-k8s-master
  type: git
  icon: github
  source:
    branch: master
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))

- name: cf-for-k8s-last-valid-commit
  type: git
  icon: github
  source:
    branch: last-valid-commit
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readwrite_deploy_key.private_key))

- name: cf-for-k8s-master-push
  type: git
  icon: github
  source:
    branch: master
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readwrite_deploy_key.private_key))

- name: relint-envs
  type: git
  source:
    branch: master
    uri: git@github.com:cloudfoundry/relint-envs.git
    private_key: ((relint-ci-repository_readwrite_deploy_key.private_key))

- name: weekly
  type: time
  icon: clock-outline
  source:
    start: 7:00 -0700
    stop: 7:30 -0700
    interval: 168h

- name: weekday-am
  type: time
  icon: clock-outline
  source:
    days: [Monday, Tuesday, Wednesday, Thursday, Friday]
    start: 9:00 AM
    stop: 10:00 AM
    location: America/Los_Angeles

- name: weekday-pm
  type: time
  icon: clock-outline
  source:
    days: [Monday, Tuesday, Wednesday, Thursday, Friday]
    start: 6:00 PM
    stop: 7:00 PM
    location: America/Los_Angeles

- name: friday-evening
  type: time
  icon: clock-outline
  source:
    start: 5:00 PM
    stop: 7:00 PM
    days: [Friday]
    location: America/Los_Angeles

- name: every-20-minutes
  type: time
  icon: clock-outline
  source:
    interval: 20m

- name: runtime-ci
  type: git
  icon: github
  source:
    branch: master
    uri: https://github.com/cloudfoundry/runtime-ci.git


- name: cf-for-k8s-pr-all-branches-and-forks
  type: pull-request
  icon: github
  source:
    access_token: ((github_status_bot_repo_access_token))
    repository: cloudfoundry/cf-for-k8s
    disable_forks: false

- name: cf-for-k8s-pr-master
  type: pull-request
  icon: github
  source:
    access_token: ((github_status_bot_repo_access_token))
    repository: cloudfoundry/cf-for-k8s
    disable_forks: false
    base_branch: master

- name: cf-for-k8s-pr-develop
  type: pull-request
  icon: github
  source:
    access_token: ((github_status_bot_repo_access_token))
    repository: cloudfoundry/cf-for-k8s
    disable_forks: false
    base_branch: develop

- name: cf-for-k8s-ci-image
  type: docker-image
  icon: docker
  source:
    repository: relintdockerhubpushbot/cf-for-k8s-ci
    username: ((dockerhub.username))
    password: ((dockerhub.password))
    email: cf-release-integration+dockerhub-push-bot@pivotal.io

- name: cf-for-k8s-azure-image
  type: docker-image
  icon: docker
  source:
    repository: relintdockerhubpushbot/cf-for-k8s-azure
    username: ((dockerhub.username))
    password: ((dockerhub.password))
    email: cf-release-integration+dockerhub-push-bot@pivotal.io

- name: k14s-io
  type: git
  icon: github
  source:
    branch: develop
    uri: https://github.com/k14s/k14s.io.git
    paths:
    - pkg/website/templates/install.sh

- name: ready-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: k8s-dev/ready
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: destroy-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: k8s-dev/destroy
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: stability-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: cf-for-k8s-stability
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: deliver-tracker-stories
  type: tracker
  source:
    token: ((cf_relint_tracker_api_token))
    project_id: "1382120"
    tracker_url: https://www.pivotaltracker.com

- name: terraform
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))

- name: terraform-long-lived-sli
  type: terraform
  source:
    env_name: long-lived-sli
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))

- name: terraform-rds
  type: terraform
  source:
    env_name: aws-rds
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))
          
- name: cf-for-k8s-gke-terraform-templates
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-for-k8s
    branch: develop
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - deploy/gke/terraform/**

- name: cf-for-k8s-rds-terraform-templates
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-for-k8s
    branch: rds-validation-pipeline
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - deploy/rds/terraform/**

- name: cf-for-k8s-aks-terraform-templates
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-for-k8s
    branch: develop
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - deploy/aks/terraform/**

- name: cf-for-k8s-kind-gcp-terraform-templates
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-for-k8s
    branch: develop
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - deploy/kind-on-gcp/terraform/**

# Extract common platform and image_resource details so task configs can be more concise
x-config: &common-task-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: relintdockerhubpushbot/cf-for-k8s-ci
jobs:
- name: run-unit-tests
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
      trigger: true
    - get: cf-for-k8s-ci

  - task: run-unit-tests
    file: cf-for-k8s-ci/ci/tasks/run-unit-tests/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop

- name: branch-freshness
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-all-branches
      trigger: true
    - get: runtime-ci

  - task: validate-branch-freshness
    file: runtime-ci/tasks/validate-branch-freshness/task.yml
    input_mapping:
      repo: cf-for-k8s-all-branches

- name: test-vendir-sync-on-cf-for-k8s
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
      trigger: true
    - get: cf-for-k8s-ci

  - task: check-vendir-sync
    file: cf-for-k8s-ci/ci/tasks/check-vendir-sync/task.yml
    input_mapping:
      ci-tasks: cf-for-k8s-ci
      cf-for-k8s: cf-for-k8s-develop
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))

- name: validate-cf-for-k8s-gke
  serial: true
  public: true
  plan:
  - get: cf-for-k8s-develop
    passed:
    - test-vendir-sync-on-cf-for-k8s
    - run-unit-tests
    trigger: true
  - get: cf-for-k8s-ci

  - put: ready-pool
    params: {acquire: true}

  - task: install-cf
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      APP_REGISTRY_HOSTNAME: ((cf_for_k8s_private_dockerhub.hostname))
      APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.repository_prefix))
      APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
    file: cf-for-k8s-ci/ci/tasks/install-cf/task.yml

  - task: run-smoke-test
    file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
    params:
      SMOKE_TEST_SKIP_SSL: false
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    params:
      APP_NAME: lingering-node-app
      VERIFY_EXISTING_APP: false
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop

  - task: delete-cf
    input_mapping:
      pool-lock: ready-pool
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-ci
      - name: pool-lock
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          source cf-for-k8s-ci/ci/helpers/gke.sh

          cluster_name="$(cat pool-lock/name)"
          gcloud_auth "${cluster_name}"

          kapp delete -a cf --yes

  - put: destroy-pool
    params:
      add: ready-pool

  - put: ready-pool
    params:
      remove: ready-pool

- name: validate-cf-for-k8s-gke-external-db
  serial: true
  public: true
  plan:
  - get: cf-for-k8s-develop
    passed:
    - test-vendir-sync-on-cf-for-k8s
    - run-unit-tests
    trigger: true
  - get: cf-for-k8s-ci

  - put: ready-pool
    params: {acquire: true}

  - task: install-postgres
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
    file: cf-for-k8s-ci/ci/tasks/install-postgres/task.yml
    input_mapping:
      pool-lock: ready-pool

  - task: install-cf
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      APP_REGISTRY_HOSTNAME: ((cf_for_k8s_private_dockerhub.hostname))
      APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.repository_prefix))
      APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
      ADDITIONAL_YAML_CONFIG: db-metadata/db-values.yaml
    file: cf-for-k8s-ci/ci/tasks/install-cf/task.yml

  - task: run-smoke-test
    file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
    params:
      SMOKE_TEST_SKIP_SSL: false
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    params:
      APP_NAME: lingering-node-app
      VERIFY_EXISTING_APP: false
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop

  - task: delete-cf
    input_mapping:
      pool-lock: ready-pool
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-ci
      - name: pool-lock
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          source cf-for-k8s-ci/ci/helpers/gke.sh

          cluster_name="$(cat pool-lock/name)"
          gcloud_auth "${cluster_name}"

          kapp delete -a cf --yes

  - task: delete-postgres
    input_mapping:
      pool-lock: ready-pool
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-ci
      - name: pool-lock
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          source cf-for-k8s-ci/ci/helpers/gke.sh

          cluster_name="$(cat pool-lock/name)"
          gcloud_auth "${cluster_name}"

          helm uninstall -n external-db postgresql
          kubectl delete namespace external-db

  - put: destroy-pool
    params:
      add: ready-pool

  - put: ready-pool
    params:
      remove: ready-pool

- name: validate-cf-for-k8s-gke-rds
  serial: true
  public: true
  plan:
  - get: cf-for-k8s-develop
    passed:
    - test-vendir-sync-on-cf-for-k8s
    - run-unit-tests
    trigger: true
  - get: cf-for-k8s-ci
  - get: terraform-rds

  - put: ready-pool
    params: {acquire: true}

  - task: install-rds
    params:
      PGPASSWORD: ((ci_k8s_aws_rds_database_password))
    file: cf-for-k8s-ci/ci/tasks/install-rds/task.yml

  - task: install-cf
    input_mapping:
      pool-lock: ready-pool
      cf-for-k8s: cf-for-k8s-develop
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      APP_REGISTRY_HOSTNAME: ((cf_for_k8s_private_dockerhub.hostname))
      APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.repository_prefix))
      APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
      ADDITIONAL_YAML_CONFIG: db-metadata/db-values.yaml
    file: cf-for-k8s-ci/ci/tasks/install-cf/task.yml

  - task: run-smoke-test
    file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
    params:
      SMOKE_TEST_SKIP_SSL: false
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    params:
      APP_NAME: lingering-node-app
      VERIFY_EXISTING_APP: false
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop

  - task: delete-cf
    input_mapping:
      pool-lock: ready-pool
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-ci
      - name: pool-lock
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          source cf-for-k8s-ci/ci/helpers/gke.sh

          cluster_name="$(cat pool-lock/name)"
          gcloud_auth "${cluster_name}"

          kapp delete -a cf --yes

  - put: destroy-pool
    params:
      add: ready-pool

  - put: ready-pool
    params:
      remove: ready-pool

  - task: delete-rds
    params:
      PGPASSWORD: ((ci_k8s_aws_rds_database_password))
    file: cf-for-k8s-ci/ci/tasks/delete-rds/task.yml

- name: validate-cf-for-k8s-oldest
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
      passed:
      - test-vendir-sync-on-cf-for-k8s
      - run-unit-tests
      trigger: true
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-kind-gcp-terraform-templates

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: oldest_version

    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: validate-cf-for-k8s-newest
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop
      passed:
      - test-vendir-sync-on-cf-for-k8s
      - run-unit-tests
      trigger: true
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-kind-gcp-terraform-templates

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: newest_version

    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: promote-master-deliver-stories
  serial: true
  public: true
  plan:
  - get: cf-for-k8s-develop
    passed:
      - validate-cf-for-k8s-newest
      - validate-cf-for-k8s-oldest
      - validate-cf-for-k8s-gke
      - validate-cf-for-k8s-gke-external-db
    trigger: true
  - put: cf-for-k8s-master-push
    params:
      repository: cf-for-k8s-develop
  - put: deliver-tracker-stories
    params:
      repos:
        - cf-for-k8s-develop

- name: install-and-smoketest-sli
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-master
    - get: cf-for-k8s-ci
    - get: every-20-minutes
      trigger: true

  - put: stability-pool
    params:
      acquire: true
  - do:
    - task: delete-cf
      input_mapping:
        pool-lock: stability-pool
      config:
        <<: *common-task-config
        inputs:
        - name: cf-for-k8s-ci
        - name: pool-lock
        params:
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            source cf-for-k8s-ci/ci/helpers/gke.sh

            cluster_name="$(cat pool-lock/name)"
            gcloud_auth "${cluster_name}"

            kapp delete -a cf --yes

    - task: install-cf
      input_mapping:
        pool-lock: stability-pool
      config:
        <<: *common-task-config
        inputs:
        - name: cf-for-k8s-master
        - name: cf-for-k8s-ci
        - name: pool-lock
        outputs:
        - name: env-metadata
        params:
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            source cf-for-k8s-ci/ci/helpers/gke.sh

            cluster_name="$(cat pool-lock/name)"
            gcloud_auth "${cluster_name}"

            export DNS_DOMAIN="${cluster_name}.((ci_k8s_root_domain))"
            cf-for-k8s-master/hack/confirm-network-policy.sh "${cluster_name}" '((ci_k8s_gcp_project_zone))'

            echo "Generating install values..."
            cf-for-k8s-master/hack/generate-values.sh --cf-domain "${DNS_DOMAIN}" --gcr-service-account-json gcp-service-account.json > cf-install-values.yml
            echo "istio_static_ip: $(jq -r '.lb_static_ip' pool-lock/metadata)" >> cf-install-values.yml

            echo "Installing CF..."
            kapp deploy -a cf -f <(ytt -f cf-for-k8s-master/config -f cf-install-values.yml) -y

            bosh interpolate --path /default_ca/ca /tmp/${DNS_DOMAIN}/cf-vars.yaml > env-metadata/default_ca.ca
            bosh interpolate --path /cf_admin_password cf-install-values.yml > env-metadata/cf-admin-password.txt
            echo "${DNS_DOMAIN}" > env-metadata/dns-domain.txt

    - task: run-smoke-test
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      params:
        SMOKE_TEST_SKIP_SSL: false
      input_mapping:
        cf-for-k8s: cf-for-k8s-master

    - task: delete-cf
      input_mapping:
        pool-lock: stability-pool
      config:
        <<: *common-task-config
        inputs:
        - name: cf-for-k8s-ci
        - name: pool-lock
        params:
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            source cf-for-k8s-ci/ci/helpers/gke.sh

            cluster_name="$(cat pool-lock/name)"
            gcloud_auth "${cluster_name}"

            kapp delete -a cf --yes

    ensure:
      try:
        put: stability-pool
        params:
          release: stability-pool

- name: long-lived-env-sli
  serial: true
  serial_groups: [long-lived-env]
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-master
    - get: every-20-minutes
      trigger: true

  - task: run-smoke-test
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-master
      params:
        CF_ADMIN_PASSWORD: ((ll_dep_cf_admin_pass))
      run:
        path: /bin/sh
        args:
        - -ec
        - |
          DNS_DOMAIN="long-lived-sli.((ci_k8s_root_domain))"
          export SMOKE_TEST_API_ENDPOINT="https://api.${DNS_DOMAIN}"
          export SMOKE_TEST_APPS_DOMAIN="apps.${DNS_DOMAIN}"
          export SMOKE_TEST_USERNAME=admin
          export SMOKE_TEST_PASSWORD=${CF_ADMIN_PASSWORD}
          export SMOKE_TEST_SKIP_SSL=true
          cf-for-k8s-master/hack/run-smoke-tests.sh

- name: manual-redeploy-long-lived-env-with-latest-master
  serial: true
  serial_groups: [long-lived-env]
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-master
    - get: cf-for-k8s-ci
    - get: relint-envs

  - task: delete-cf
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-ci
      params:
        CLUSTER_NAME: long-lived-sli
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          source cf-for-k8s-ci/ci/helpers/gke.sh
          gcloud_auth "${CLUSTER_NAME}"

          kapp delete -a cf --yes

  - get: terraform-long-lived-sli

  - task: install-cf
    input_mapping:
      pool-lock: stability-pool
      terraform: terraform-long-lived-sli
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-master
      - name: cf-for-k8s-ci
      - name: relint-envs
      - name: terraform
      outputs:
      - name: env-metadata
      - name: relint-envs-updated
      params:
        CLUSTER_NAME: long-lived-sli
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          source cf-for-k8s-ci/ci/helpers/gke.sh
          gcloud_auth "${CLUSTER_NAME}"

          export DNS_DOMAIN="${CLUSTER_NAME}.((ci_k8s_root_domain))"

          echo "Generating install values..."
          cf-for-k8s-master/hack/generate-values.sh --cf-domain "${DNS_DOMAIN}" --gcr-service-account-json gcp-service-account.json > cf-install-values.yml
          sed -i.bak 's/\(cf_admin_password:\).*$/\1 ((ll_dep_cf_admin_pass))/' cf-install-values.yml
          sed -i.bak 's/\(cf_admin_password:\).*$/\1 ((ll_dep_cf_admin_pass))/' "/tmp/${DNS_DOMAIN}/cf-vars.yaml"

          echo "istio_static_ip: $(jq -r '.lb_static_ip' terraform/metadata)" >> cf-install-values.yml

          echo "Installing CF..."
          kapp deploy -a cf -f <(ytt -f cf-for-k8s-master/config -f cf-install-values.yml) -y

          echo "((ll_dep_cf_admin_pass))" > env-metadata/cf-admin-password.txt
          echo "${DNS_DOMAIN}" > env-metadata/dns-domain.txt

          source cf-for-k8s-ci/ci/helpers/env-git.sh
          commit-long-lived-sli-cf-vars

  - put: relint-envs
    params:
      repository: relint-envs-updated
      rebase: true

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    params:
      APP_NAME: long-lived-node-app
      VERIFY_EXISTING_APP: false
    input_mapping:
      cf-for-k8s: cf-for-k8s-master

- name: upgrade-long-lived-env-to-latest-master
  serial: true
  serial_groups: [long-lived-env]
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-master
    - get: cf-for-k8s-ci
    - get: relint-envs
    - get: weekday-pm
      trigger: true

  - get: terraform-long-lived-sli

  - task: install-cf
    input_mapping:
      pool-lock: stability-pool
      terraform: terraform-long-lived-sli
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-master
      - name: cf-for-k8s-ci
      - name: relint-envs
      - name: terraform
      outputs:
      - name: relint-envs-updated
      params:
        CLUSTER_NAME: long-lived-sli
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          source cf-for-k8s-ci/ci/helpers/gke.sh
          gcloud_auth "${CLUSTER_NAME}"

          export DNS_DOMAIN="${CLUSTER_NAME}.((ci_k8s_root_domain))"

          echo "Using cf-vars from relint-envs/k8s-environments/long-lived-sli/cf-vars.yaml..."
          mkdir -p "/tmp/${DNS_DOMAIN}"
          cp relint-envs/k8s-environments/long-lived-sli/cf-vars.yaml "/tmp/${DNS_DOMAIN}/cf-vars.yaml"

          echo "Generating install values..."
          cf-for-k8s-master/hack/generate-values.sh --cf-domain "${DNS_DOMAIN}" --gcr-service-account-json gcp-service-account.json > cf-install-values.yml
          sed -i.bak 's/\(cf_admin_password:\).*$/\1 ((ll_dep_cf_admin_pass))/' cf-install-values.yml
          sed -i.bak 's/\(cf_admin_password:\).*$/\1 ((ll_dep_cf_admin_pass))/' "/tmp/${DNS_DOMAIN}/cf-vars.yaml"

          echo "istio_static_ip: $(jq -r '.lb_static_ip' terraform/metadata)" >> cf-install-values.yml

          echo "Installing CF..."
          kapp deploy -a cf -f <(ytt -f cf-for-k8s-master/config -f cf-install-values.yml) -y

          source cf-for-k8s-ci/ci/helpers/env-git.sh
          commit-long-lived-sli-cf-vars

  - put: relint-envs
    params:
      repository: relint-envs-updated
      rebase: true

- name: fail-prs-to-cf-for-k8s-master
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-pr-master
      trigger: true
      version: every
    - get: runtime-ci

  - task: write-pr-check-failure-comment
    file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
    input_mapping:
      pull-request: cf-for-k8s-pr-master

  - put: cf-for-k8s-pr-master
    params:
      path: cf-for-k8s-pr-master
      status: failure
      context: ((pr_context))
      comment_file: pull-request-comment/comment

- name: pass-prs-to-cf-for-k8s-develop
  public: true
  plan:
  - get: cf-for-k8s-pr-develop
    trigger: true
    version: every

  - put: cf-for-k8s-pr-develop
    params:
      path: cf-for-k8s-pr-develop
      status: success
      context: ((pr_context))

- name: run-unit-tests-on-pr
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-pr-all-branches-and-forks
      trigger: true
      version: every
    - get: cf-for-k8s-ci
    - get: runtime-ci

  - put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: pending
      context: run-unit-tests

  - task: run-unit-tests
    file: cf-for-k8s-ci/ci/tasks/run-unit-tests/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks

    on_failure:
      do:
      - task: write-pr-check-failure-comment
        file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
        input_mapping:
          pull-request: cf-for-k8s-pr-all-branches-and-forks

      - put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: failure
          context: run-unit-tests
          comment_file: pull-request-comment/comment

    on_success:
      put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: success
        context: run-unit-tests


- name: test-vendir-sync-on-cf-for-k8s-pr
  public: true
  plan:
  - in_parallel:
    - get: runtime-ci
    - get: cf-for-k8s-pr-all-branches-and-forks
      params:
        integration_tool: rebase
      trigger: true
      version: every
    - get: cf-for-k8s-ci

  - put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: pending
      context: check-vendir-sync

  - task: check-vendir-sync
    file: cf-for-k8s-ci/ci/tasks/check-vendir-sync/task.yml
    input_mapping:
      ci-tasks: cf-for-k8s-ci
      cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))

    on_failure:
      do:
      - task: write-pr-check-failure-comment
        file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
        input_mapping:
          pull-request: cf-for-k8s-pr-all-branches-and-forks

      - put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: failure
          context: check-vendir-sync
          comment_file: pull-request-comment/comment

    on_success:
      put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: success
        context: check-vendir-sync

- name: validate-pr-on-gke
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-pr-all-branches-and-forks
      params:
        integration_tool: rebase
      trigger: true
      version: every
      passed:
      - run-unit-tests-on-pr
      - test-vendir-sync-on-cf-for-k8s-pr
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
    - get: runtime-ci

  - put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: pending
      context: upgrade-check-uptime

  - put: ready-pool
    params: {acquire: true}

  - do:
    - task: install-cf-develop
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
        pool-lock: ready-pool
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        DOMAIN: k8s-dev.relint.rocks
        USE_EXTERNAL_APP_REGISTRY: true
        APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
        APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))

    - task: push-test-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      params:
        APP_NAME: jp-node-app
        VERIFY_EXISTING_APP: false

    - task: upgrade-to-pr
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
        pool-lock: ready-pool
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        UPGRADE: true
        UPTIMER: true
        DOMAIN: k8s-dev.relint.rocks
        USE_EXTERNAL_APP_REGISTRY: true
        APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
        APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))

    - in_parallel:
      - task: run-smoke-tests
        file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
        input_mapping:
          cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
        params:
          SMOKE_TEST_SKIP_SSL: false
      - task: verify-existing-app
        file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
        input_mapping:
          cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
        params:
          APP_NAME: jp-node-app
          VERIFY_EXISTING_APP: true

    on_failure:
      do:
      - task: write-pr-check-failure-comment
        file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
        input_mapping:
          pull-request: cf-for-k8s-pr-all-branches-and-forks

      - put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: failure
          context: upgrade-check-uptime
          comment_file: pull-request-comment/comment

    on_success:
      put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: success
        context: upgrade-check-uptime

    ensure:
      do:
      - task: delete-cf
        input_mapping:
          pool-lock: ready-pool
        config:
          <<: *common-task-config
          inputs:
          - name: cf-for-k8s-ci
          - name: pool-lock
          params:
            GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
            GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
            GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
          run:
            path: /bin/bash
            args:
            - -ec
            - |
              source cf-for-k8s-ci/ci/helpers/gke.sh

              cluster_name="$(cat pool-lock/name)"
              gcloud_auth "${cluster_name}"

              kapp delete -a cf --yes

      - put: destroy-pool
        params:
          add: ready-pool

      - put: ready-pool
        params:
          remove: ready-pool

- name: validate-pr-on-gke-external-db
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-pr-all-branches-and-forks
      params:
        integration_tool: rebase
      trigger: true
      version: every
      passed:
      - run-unit-tests-on-pr
      - test-vendir-sync-on-cf-for-k8s-pr
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
    - get: cf-for-k8s-gke-terraform-templates
    - get: runtime-ci

  - put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: pending
      context: upgrade-check-uptime
  - task: create-tf-vars-file
    config:
      <<: *common-task-config
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          echo "pr-validation" > tf-vars/env-name.txt
          cat > tf-vars/input.tfvars <<EOT
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          env_name = "$(cat tf-vars/env-name.txt)"
          env_dns_domain = "$(cat tf-vars/env-name.txt).((ci_k8s_root_domain))"
          dns_zone_name = "((ci_k8s_dns_zone_name))"
          EOT
  - put: terraform
    params:
      terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - task: install-postgres
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
    file: cf-for-k8s-ci/ci/tasks/install-postgres/task.yml
  - do:
    - task: install-cf-develop
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        DOMAIN: cf-for-k8s.relint.rocks
        USE_EXTERNAL_APP_REGISTRY: true
        APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
        APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
        USE_EXTERNAL_DB: "true"
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    params:
      APP_NAME: jp-node-app
      VERIFY_EXISTING_APP: false
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop

  - task: upgrade-to-pr
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      UPGRADE: true
      UPTIMER: true
      DOMAIN: cf-for-k8s.relint.rocks
      USE_EXTERNAL_APP_REGISTRY: true
      APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
      APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
      USE_EXTERNAL_DB: "true"

  - in_parallel:
    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      params:
        SMOKE_TEST_SKIP_SSL: false
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
    - task: verify-existing-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      params:
        APP_NAME: jp-node-app
        VERIFY_EXISTING_APP: true
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks

  on_failure:
    do:
    - task: write-pr-check-failure-comment
      file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
      input_mapping:
        pull-request: cf-for-k8s-pr-all-branches-and-forks

    - put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: failure
        context: upgrade-check-uptime
        comment_file: pull-request-comment/comment
  
  on_success:
    put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: success
      context: upgrade-check-uptime

  ensure:
    do:
    - task: delete-cf
      config:
        <<: *common-task-config
        inputs:
        - name: cf-for-k8s-ci
        - name: tf-vars
        params:
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            source cf-for-k8s-ci/ci/helpers/gke.sh
            cluster_name="$(cat tf-vars/env-name.txt)"
            gcloud_auth "${cluster_name}"
            kapp delete -a cf --yes

    - put: terraform
      params:
        terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy


- name: validate-pr-on-gke-rds
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-pr-all-branches-and-forks
      params:
        integration_tool: rebase
      trigger: true
      version: every
      passed:
      - run-unit-tests-on-pr
      - test-vendir-sync-on-cf-for-k8s-pr
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
    - get: cf-for-k8s-gke-terraform-templates
    - get: runtime-ci
    - get: terraform-rds

  - put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: pending
      context: upgrade-check-uptime
  - task: create-tf-vars-file
    config:
      <<: *common-task-config
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_gcs_admin_service_account_json)) # rename back to dev_cluster_pool_admin_service_account_json
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          echo "pr-validation" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          env_name = "$(cat tf-vars/env-name.txt)"
          env_dns_domain = "$(cat tf-vars/env-name.txt).((ci_k8s_root_domain))"
          dns_zone_name = "((ci_k8s_dns_zone_name))"
          EOT
  - put: terraform
    params:
      terraform_source: terraform-rds/deploy/gke/terraform # rename to cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - task: install-rds
    params:
      PGPASSWORD: ((ci_k8s_aws_rds_database_password))
    file: cf-for-k8s-ci/ci/tasks/install-rds/task.yml
  - do:
    - task: install-cf-develop
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        DOMAIN: k8s-dev.relint.rocks
        USE_EXTERNAL_APP_REGISTRY: false
        APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
        APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
        USE_EXTERNAL_DB: "true"
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop

  - task: push-test-app
    attempts: 3
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    params:
      APP_NAME: jp-node-app
      VERIFY_EXISTING_APP: false
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop

  - task: upgrade-to-pr
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      UPGRADE: true
      UPTIMER: true
      DOMAIN: cf-for-k8s.relint.rocks
      USE_EXTERNAL_APP_REGISTRY: true
      APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
      APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
      USE_EXTERNAL_DB: "true"

  - in_parallel:
    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      params:
        SMOKE_TEST_SKIP_SSL: false
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
    - task: verify-existing-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      params:
        APP_NAME: jp-node-app
        VERIFY_EXISTING_APP: true
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks

  on_failure:
    do:
    - task: write-pr-check-failure-comment
      file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
      input_mapping:
        pull-request: cf-for-k8s-pr-all-branches-and-forks

    - put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: failure
        context: upgrade-check-uptime
        comment_file: pull-request-comment/comment
    
  on_success:
    put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: success
      context: upgrade-check-uptime

  ensure:
    do:
    - task: delete-cf
      config:
        <<: *common-task-config
        inputs:
        - name: cf-for-k8s-ci
        # - name: tf-vars
        params:
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            source cf-for-k8s-ci/ci/helpers/gke.sh
            cluster_name="$(cat tf-vars/env-name.txt)"
            gcloud_auth "${cluster_name}"
            kapp delete -a cf --yes
    - put: terraform
      params:
        terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy
    - task: delete-rds
      params:
        PGPASSWORD: ((ci_k8s_aws_rds_database_password))
      file: cf-for-k8s-ci/ci/tasks/delete-rds/task.yml

- name: validate-pr-on-newest-k8s-kind
  plan:
  - in_parallel:
    - get: cf-for-k8s-pr-all-branches-and-forks
      trigger: true
      version: every
      passed:
      - run-unit-tests-on-pr
      - test-vendir-sync-on-cf-for-k8s-pr
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-kind-gcp-terraform-templates
    - get: runtime-ci

  - put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: pending
      context: newest-supported-k8s-version

  - task: create-tf-vars-file
    file: cf-for-k8s-ci/ci/tasks/create-tf-vars-file/task.yml
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_REGION: ((ci_k8s_gcp_project_region))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))

  - put: terraform
    params:
      terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: newest_version

    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    on_failure:
      do:
      - task: write-pr-check-failure-comment
        file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
        input_mapping:
          pull-request: cf-for-k8s-pr-all-branches-and-forks

      - put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: failure
          context: newest-supported-k8s-version
          comment_file: pull-request-comment/comment

    on_success:
      put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: success
        context: newest-supported-k8s-version

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: validate-pr-on-oldest-k8s-kind
  plan:
  - in_parallel:
    - get: cf-for-k8s-pr-all-branches-and-forks
      trigger: true
      version: every
      passed:
      - run-unit-tests-on-pr
      - test-vendir-sync-on-cf-for-k8s-pr
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-kind-gcp-terraform-templates
    - get: runtime-ci

  - put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: pending
      context: oldest-supported-k8s-version

  - task: create-tf-vars-file
    file: cf-for-k8s-ci/ci/tasks/create-tf-vars-file/task.yml
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_REGION: ((ci_k8s_gcp_project_region))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))

  - put: terraform
    params:
      terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - do:
    - task: create-kind-cluster
      attempts: 5
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: oldest_version

    - task: install-cf
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    on_failure:
      do:
      - task: write-pr-check-failure-comment
        file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
        input_mapping:
          pull-request: cf-for-k8s-pr-all-branches-and-forks

      - put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: failure
          context: oldest-supported-k8s-version
          comment_file: pull-request-comment/comment

    on_success:
      put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: success
        context: oldest-supported-k8s-version

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files: [tf-vars/input.tfvars]
      get_params:
        action: destroy

- name: build-cf-for-k8s-ci-image
  public: true
  plan:
  - timeout: 4h
    do:
    - in_parallel:
      - get: weekly
        trigger: true
      - get: cf-for-k8s-ci-dockerfile
        trigger: true
      - get: k14s-io
        trigger: true

    - put: cf-for-k8s-ci-image
      params:
        build: cf-for-k8s-ci-dockerfile/ci/dockerfiles/cf-for-k8s-ci/
        push: true

- name: build-cf-for-k8s-azure-image
  public: true
  plan:
  - timeout: 4h
    do:
    - in_parallel:
      - get: weekly
        trigger: true
      - get: cf-for-k8s-azure-dockerfile
        trigger: true
      - get: k14s-io
        trigger: true

    - put: cf-for-k8s-azure-image
      params:
        build: cf-for-k8s-azure-dockerfile/ci/dockerfiles/cf-for-k8s-azure/
        push: true

- name: validate-azure
  public: true
  serial: true
  serial_groups:
  - azure
  plan:
  - in_parallel:
    - get: cf-for-k8s-master
    - get: cf-for-k8s-ci
    - get: weekday-am
      trigger: true
    - get: cf-for-k8s-aks-terraform-templates

  - do:
    - task: create-tf-vars-file
      config:
        platform: linux
        image_resource:
          type: docker-image
          source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
        outputs:
        - name: tf-vars
        params:
          SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            echo "ci-test-cluster" > tf-vars/env-name.txt
            cat <<EOT > tf-vars/input.tfvars
            service_principal_id = "((aks_cluster_creation_service_principal_username))"
            service_principal_secret = "((aks_cluster_creation_service_principal_password))"
            subscription_id = "((relint_azure_subscription_id))"
            tenant_id = "((aks_cluster_creation_tenant))"
            google_project = "((ci_k8s_gcp_project_name))"
            google_region = "((ci_k8s_gcp_project_region))"
            google_service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
            env_name = "$(cat tf-vars/env-name.txt)"
            env_dns_domain = "azure-$(cat tf-vars/env-name.txt).((ci_k8s_root_domain))"
            dns_zone_name = "((ci_k8s_dns_zone_name))"
            EOT

    - put: terraform
      params:
        terraform_source: cf-for-k8s-aks-terraform-templates/deploy/aks/terraform
        env_name_file: tf-vars/env-name.txt
        delete_on_failure: true
        var_files: [tf-vars/input.tfvars]

    - do:
      - task: install-cf
        config:
          <<: *common-task-config
          inputs:
          - name: cf-for-k8s-master
          - name: terraform
          outputs:
          - name: env-metadata
          run:
            path: /bin/bash
            args:
            - -ec
            - |
              export KUBECONFIG=kube-config.yml
              cluster_name="$(cat terraform/name)"
              echo '((ci_k8s_gcp_service_account_json))' > gcp-service-account.json
              jq -r '.kubeconfig' terraform/metadata >> ${KUBECONFIG}

              export DNS_DOMAIN="azure-$(cat terraform/name).((ci_k8s_root_domain))"

              echo "Generating install values..."
              cf-for-k8s-master/hack/generate-values.sh --cf-domain "${DNS_DOMAIN}" --gcr-service-account-json gcp-service-account.json > cf-install-values.yml
              echo "istio_static_ip: $(jq -r '.lb_static_ip' terraform/metadata)" >> cf-install-values.yml

              echo "Installing CF..."
              kapp deploy -a cf -f <(ytt -f cf-for-k8s-master/config -f cf-install-values.yml) -y

              bosh interpolate --path /cf_admin_password cf-install-values.yml > env-metadata/cf-admin-password.txt
              echo "${DNS_DOMAIN}" > env-metadata/dns-domain.txt
              bosh interpolate --path /default_ca/ca /tmp/${DNS_DOMAIN}/cf-vars.yaml > env-metadata/default_ca.ca

    - task: run-smoke-test
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      params:
        SMOKE_TEST_SKIP_SSL: false
      input_mapping:
        cf-for-k8s: cf-for-k8s-master

      ensure:
        do:
        - task: delete-cf
          config:
            <<: *common-task-config
            inputs:
            - name: terraform
            run:
              path: /bin/bash
              args:
              - -ec
              - |
                cluster_name="$(cat terraform/name)"
                export KUBECONFIG=kube-config.yml
                jq -r '.kubeconfig' terraform/metadata >> ${KUBECONFIG}

                kapp delete -a cf --yes

    ensure:
      do:
      - put: terraform
        params:
          terraform_source: cf-for-k8s-aks-terraform-templates/deploy/aks/terraform
          env_name_file: tf-vars/env-name.txt
          action: destroy
          var_files: [tf-vars/input.tfvars]
        get_params:
          action: destroy

- name: validate-cf-for-k8s-upgrade
  serial: true
  public: true
  plan:
  - get: cf-for-k8s-last-valid-commit
  - get: cf-for-k8s-master
    trigger: true
  - get: cf-for-k8s-ci

  - put: ready-pool
    params: {acquire: true}

  - task: install-cf-last-valid-commit
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      pool-lock: ready-pool
      cf-for-k8s: cf-for-k8s-last-valid-commit
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    params:
      APP_NAME: jp-node-app
      VERIFY_EXISTING_APP: false
    input_mapping:
      cf-for-k8s: cf-for-k8s-last-valid-commit

  - task: install-cf-master
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      pool-lock: ready-pool
      cf-for-k8s: cf-for-k8s-master
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      UPGRADE: true
      UPTIMER: true

  - in_parallel:
    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-master
      params:
        SMOKE_TEST_SKIP_SSL: true
    - task: verify-existing-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      params:
        APP_NAME: jp-node-app
        VERIFY_EXISTING_APP: true
      input_mapping:
        cf-for-k8s: cf-for-k8s-master

  - task: delete-cf
    input_mapping:
      pool-lock: ready-pool
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-ci
      - name: pool-lock
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          source cf-for-k8s-ci/ci/helpers/gke.sh
          cluster_name="$(cat pool-lock/name)"
          gcloud_auth "${cluster_name}"

          kapp delete -a cf --yes

  - put: destroy-pool
    params:
      add: ready-pool

  - put: ready-pool
    params:
      remove: ready-pool

  on_failure:
      task: job-failure
      config:
        << : *common-task-config
        run:
          path: /bin/bash
          args:
          - -c
          - |
            echo Upgrade has failed.
            echo Last valid commit can be updated to HEAD of master via the 'update-last-valid-commit-to-head-of-master' job.

- name: update-last-valid-commit-to-head-of-master
  serial: true
  public: true
  plan:
  - get: cf-for-k8s-last-valid-commit
  - get: cf-for-k8s-master
  - put: cf-for-k8s-last-valid-commit
    params:
      repos:
        - cf-for-k8s-master

- name: validate-values-rotation-redeploy
  serial: true
  public: true
  plan:
  - get: cf-for-k8s-master
  - get: cf-for-k8s-ci
  - get: weekday-pm
    trigger: true

  - put: ready-pool
    params: {acquire: true}

  - task: fresh-install-cf
    input_mapping:
      pool-lock: ready-pool
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-master
      - name: cf-for-k8s-ci
      - name: pool-lock
      outputs:
      - name: env-metadata
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          source cf-for-k8s-ci/ci/helpers/gke.sh
          cluster_name="$(cat pool-lock/name)"
          gcloud_auth "${cluster_name}"

          DNS_DOMAIN="${cluster_name}.k8s-dev.relint.rocks"

          echo "Generating install values..."
          cf-for-k8s-master/hack/generate-values.sh --cf-domain "${DNS_DOMAIN}" --gcr-service-account-json gcp-service-account.json > cf-install-values.yml
          echo "istio_static_ip: $(jq -r '.lb_static_ip' pool-lock/metadata)" >> cf-install-values.yml

          echo "Installing CF..."
          kapp deploy -a cf -f <(ytt -f cf-for-k8s-master/config -f cf-install-values.yml) -y

          bosh interpolate --path /cf_admin_password cf-install-values.yml > env-metadata/cf-admin-password.txt
          echo "${DNS_DOMAIN}" > env-metadata/dns-domain.txt
          grep -E "db_admin_password|capi_db_password|uaa_db_password|blobstore_secret_key|cf_admin_password" "/tmp/${cluster_name}.k8s-dev.relint.rocks/cf-vars.yaml" > env-metadata/cf-vars.yaml

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    params:
      APP_NAME: jp-node-app
      VERIFY_EXISTING_APP: false
    input_mapping:
      cf-for-k8s: cf-for-k8s-master

  - task: upgrade-cf-new-values
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-master
      pool-lock: ready-pool
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      UPGRADE: true
      UPTIMER: true
  - in_parallel:
    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-master
      params:
        SMOKE_TEST_SKIP_SSL: false
    - task: verify-existing-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      params:
        APP_NAME: jp-node-app
        VERIFY_EXISTING_APP: true
      input_mapping:
        cf-for-k8s: cf-for-k8s-master

  - task: delete-cf
    input_mapping:
      pool-lock: ready-pool
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-ci
      - name: pool-lock
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          source cf-for-k8s-ci/ci/helpers/gke.sh
          cluster_name="$(cat pool-lock/name)"
          gcloud_auth "${cluster_name}"

          kapp delete -a cf --yes

  - put: destroy-pool
    params:
      add: ready-pool

  - put: ready-pool
    params:
      remove: ready-pool

- name: add-stability-cluster-lock
  serial: true
  public: true
  plan:
  - get: runtime-ci

  - task: prepare-to-modify-pool-resource
    file: runtime-ci/tasks/prepare-to-modify-pool-resource/task.yml
    output_mapping:
      pool-resource: stability-pool
    params:
      NAME: stability

  - put: stability-pool
    params:
      add_claimed: stability-pool

- name: create-stability-cluster
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: stability-pool
      passed: [add-stability-cluster-lock]
      trigger: true
    - get: cf-for-k8s-gke-terraform-templates

  - task: create-tf-vars-file
    file: cf-for-k8s-ci/ci/tasks/create-tf-vars-file/task.yml
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_REGION: ((ci_k8s_gcp_project_region))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))

  - put: terraform
    params:
      terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
      env_name_file: stability-pool/name
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - task: write-metadata-to-lock-file
    config:
      <<: *common-task-config
      inputs:
      - name: stability-pool
      - name: terraform
      outputs:
      - name: updated-stability-pool
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          cp -v stability-pool/name updated-stability-pool/name
          cp -v terraform/metadata updated-stability-pool/metadata

  - put: stability-pool
    params:
      remove: stability-pool

  - put: stability-pool
    params:
      add: updated-stability-pool

- name: destroy-stability-cluster
  serial: true
  public: true
  plan:
  - in_parallel:
    - put: stability-pool
      params:
        claim: stability
    - get: cf-for-k8s-gke-terraform-templates

  - task: delete-cf
    input_mapping:
      pool-lock: stability-pool
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-ci
      - name: pool-lock
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          source cf-for-k8s-ci/ci/helpers/gke.sh
          cluster_name="$(cat pool-lock/name)"
          gcloud_auth "${cluster_name}"

          kapp delete -a cf --yes

  - task: create-tf-vars-file
    file: cf-for-k8s-ci/ci/tasks/create-tf-vars-file/task.yml
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_REGION: ((ci_k8s_gcp_project_region))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))

  - put: terraform
    params:
      terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
      env_name_file: stability-pool/name
      action: destroy
      var_files: [ tf-vars/input.tfvars ]
    get_params:
      action: destroy

- name: remove-stability-cluster-lock
  serial: true
  public: true
  plan:
  - get: stability-pool
    passed: [ destroy-stability-cluster ]
    trigger: true

  - put: stability-pool
    params:
      remove: stability-pool

- name: create-long-lived-sli-cluster
  serial: true
  public: true
  plan:
  - get: cf-for-k8s-gke-terraform-templates

  - task: create-tf-vars-file
    config:
      <<: *common-task-config
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          echo "long-lived-sli" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          env_name = "$(cat tf-vars/env-name.txt)"
          env_dns_domain = "$(cat tf-vars/env-name.txt).((ci_k8s_root_domain))"
          dns_zone_name = "((ci_k8s_dns_zone_name))"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

- name: destroy-long-lived-sli-cluster
  serial: true
  public: true
  plan:
  - get: cf-for-k8s-gke-terraform-templates
  - get: cf-for-k8s-ci

  - task: delete-cf
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-ci
      params:
        CLUSTER_NAME: long-lived-sli
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          source cf-for-k8s-ci/ci/helpers/gke.sh
          gcloud_auth "${CLUSTER_NAME}"

          kapp delete -a cf --yes

  - task: create-tf-vars-file
    config:
      <<: *common-task-config
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          echo "long-lived-sli" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          env_name = "$(cat tf-vars/env-name.txt)"
          env_dns_domain = "$(cat tf-vars/env-name.txt).((ci_k8s_root_domain))"
          dns_zone_name = "((ci_k8s_dns_zone_name))"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
      env_name_file: tf-vars/env-name.txt
      action: destroy
      var_files: [ tf-vars/input.tfvars ]
    get_params:
      action: destroy

- name: clean-registry
  plan:
  - get: cf-for-k8s-ci
  - get: friday-evening
    trigger: true

  - task: clean-gcr
    file: cf-for-k8s-ci/ci/tasks/clean-gcr/task.yml
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCR_REPO_NAME: gcr.io/((ci_k8s_gcp_project_name))/cf-workloads

- name: create-rds-database
  plan:
  - get: cf-for-k8s-ci
  - get: cf-for-k8s-rds-terraform-templates
  - task: create-rds-tf-vars-file
    file: cf-for-k8s-ci/ci/tasks/create-rds-tf-vars-file/task.yml
    params:
      AWS_ACCESS_KEY_ID: ((ci_k8s_aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((ci_k8s_aws_secret_access_key))
      DATABASE_PASSWORD: ((ci_k8s_aws_rds_database_password))
      AWS_REGION: ((ci_k8s_aws_region))

  - put: terraform-rds
    params:
      terraform_source: cf-for-k8s-rds-terraform-templates/deploy/rds/terraform
      delete_on_failure: true
      var_files: [tf-vars/input.tfvars]

  - task: dump
    config:
      <<: *common-task-config
      inputs: 
        - name: terraform-rds
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          cat  terraform-rds/metadata
          echo "rds address: $(jq -r '.address' terraform-rds/metadata)"
  
- name: destroy-rds-database
  plan:
  - get: cf-for-k8s-ci
  - get: cf-for-k8s-rds-terraform-templates
  - task: create-rds-tf-vars-file
    file: cf-for-k8s-ci/ci/tasks/create-rds-tf-vars-file/task.yml
    params:
      AWS_ACCESS_KEY_ID: ((ci_k8s_aws_access_key_id))
      AWS_SECRET_ACCESS_KEY: ((ci_k8s_aws_secret_access_key))
      DATABASE_PASSWORD: ((ci_k8s_aws_rds_database_password))
      AWS_REGION: ((ci_k8s_aws_region))

  - put: terraform-rds
    params:
      terraform_source: cf-for-k8s-rds-terraform-templates/deploy/rds/terraform
      var_files: [tf-vars/input.tfvars]
      action: destroy
    get_params:
      action: destroy

