---
groups:
- name: validation-checks
  jobs:
  - test-vendir-sync-on-cf-for-k8s
  - validate-cf-for-k8s
  - release-validation-pool-manual
  - validate-azure
- name: stability-check
  jobs:
  - stability-test-cf-for-k8s
  - release-stability-pool-manual
  - validate-azure
- name: pr-checks
  jobs:
  - fail-prs-to-cf-for-k8s-master
  - run-tests-on-cf-for-k8s-pr
  - test-vendir-sync-on-cf-for-k8s-pr
- name: docker-images
  jobs:
  - build-cf-for-k8s-ci-gcp-image
  - build-cf-test-runner-image
  - build-cf-for-k8s-azure-image

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

resources:
- name: cf-for-k8s-develop
  type: git
  icon: github-box
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    ignore_paths:
      - ci/**

- name: cf-for-k8s-dockerfiles
  type: git
  icon: github-box
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
      - ci/dockerfiles/**

- name: cf-for-k8s-master
  type: git
  icon: github-box
  source:
    branch: master
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))

- name: cf-for-k8s-master-push
  type: git
  icon: github-box
  source:
    branch: master
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readwrite_deploy_key.private_key))

- name: weekly
  type: time
  icon: clock-outline
  source:
    start: 7:00 -0700
    stop: 7:30 -0700
    interval: 168h

- name: thursday-am
  type: time
  icon: clock-outline
  source:
    days: [Thursday]
    start: 9:00 AM
    stop: 10:00 AM
    location: America/Los_Angeles

- name: every-20-minutes
  type: time
  icon: clock-outline
  source:
    interval: 20m

- name: runtime-ci
  type: git
  icon: github-box
  source:
    branch: master
    uri: https://github.com/cloudfoundry/runtime-ci.git

- name: cf-for-k8s-pr-all-branches
  type: pull-request
  source:
    access_token: ((github_status_bot_repo_access_token))
    repository: cloudfoundry/cf-for-k8s
    disable_forks: true

- name: cf-for-k8s-pr-all-branches-and-forks
  type: pull-request
  source:
    access_token: ((github_status_bot_repo_access_token))
    repository: cloudfoundry/cf-for-k8s
    disable_forks: false

- name: cf-for-k8s-pr-master
  type: pull-request
  source:
    access_token: ((github_status_bot_repo_access_token))
    repository: cloudfoundry/cf-for-k8s
    disable_forks: false
    base_branch: master

- name: cf-for-k8s-ci-gcp-image
  type: docker-image
  icon: docker
  source:
    repository: relintdockerhubpushbot/cf-for-k8s-ci
    username: ((dockerhub.username))
    password: ((dockerhub.password))
    email: cf-release-integration+dockerhub-push-bot@pivotal.io

- name: cf-test-runner-image
  type: docker-image
  icon: docker
  source:
    repository: relintdockerhubpushbot/cf-test-runner
    username: ((dockerhub.username))
    password: ((dockerhub.password))
    email: cf-release-integration+dockerhub-push-bot@pivotal.io

- name: cf-for-k8s-azure-image
  type: docker-image
  icon: docker
  source:
    repository: relintdockerhubpushbot/cf-for-k8s-azure
    username: ((dockerhub.username))
    password: ((dockerhub.password))
    email: cf-release-integration+dockerhub-push-bot@pivotal.io

- name: k14s-io
  type: git
  icon: github-box
  source:
    branch: master
    uri: https://github.com/k14s/k14s.io.git
    paths:
    - pkg/website/templates/install.sh

# semaphore for the Kubernetes cluster (ci-test-cluster in GKE); it is shared between this pipeline and the CF for K8s PR test pipeline
- name: validation-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: cf-for-k8s
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: stability-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: cf-for-k8s-stability
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: deliver-tracker-stories
  type: tracker
  source:
    token: ((cf_relint_tracker_api_token))
    project_id: "1382120"
    tracker_url: https://www.pivotaltracker.com

# Extract common platform and image_resource details so task configs can be more concise
x-config: &common-task-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: relintdockerhubpushbot/cf-for-k8s-ci

# Extract common platform and image_resource details so task configs can be more concise
test-runner-config: &common-test-config
  platform: linux
  image_resource:
    type: docker-image
    source:
      repository: relintdockerhubpushbot/cf-test-runner

jobs:
- name: test-vendir-sync-on-cf-for-k8s
  public: true
  plan:
  - in_parallel:
    - get: runtime-ci
    - get: cf-for-k8s-develop
      trigger: true

  - task: check-vendir-sync
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-develop
      params:
        VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      run:
        path: /bin/bash
        args:
        - -exc
        - |
          cd cf-for-k8s-develop
          vendir sync

          set +e
          git status
          git add .
          git --no-pager diff HEAD
          set -e

          git diff-index --quiet HEAD
- name: validate-cf-for-k8s
  serial: true
  public: true
  plan:
  - get: cf-for-k8s-develop
    passed:
    - test-vendir-sync-on-cf-for-k8s
    trigger: true
  - put: validation-pool
    params: {acquire: true}

  - task: delete-cf
    input_mapping: {pool-lock: validation-pool}
    config:
      <<: *common-task-config
      inputs:
      - name: pool-lock
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          cluster_name=$(cat pool-lock/name)
          export KUBECONFIG=kube-config.yml
          echo '((ci_k8s_gcp_service_account_json))' > gcp-service-account.json
          gcloud auth activate-service-account --key-file=gcp-service-account.json --project='((ci_k8s_gcp_project_name))' >/dev/null 2>&1
          gcloud container clusters get-credentials "${cluster_name}" --zone '((ci_k8s_gcp_project_zone))' >/dev/null 2>&1

          kapp delete -a cf --yes

  - task: install-cf
    input_mapping: {pool-lock: validation-pool}
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-develop
      - name: pool-lock
      outputs:
      - name: env-metadata
      params:
        DNS_ROOT_DOMAIN: ((ci_k8s_root_domain))
        DNS_ZONE_NAME: ((ci_k8s_dns_zone_name))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          export KUBECONFIG=kube-config.yml
          cluster_name=$(cat pool-lock/name)
          echo '((ci_k8s_gcp_service_account_json))' > gcp-service-account.json
          gcloud auth activate-service-account --key-file=gcp-service-account.json --project='((ci_k8s_gcp_project_name))' >/dev/null 2>&1
          gcloud container clusters get-credentials "${cluster_name}" --zone '((ci_k8s_gcp_project_zone))' >/dev/null 2>&1

          export DNS_DOMAIN="${cluster_name}.${DNS_ROOT_DOMAIN}"
          cf-for-k8s-develop/hack/confirm-network-policy.sh "${cluster_name}" '((ci_k8s_gcp_project_zone))'

          echo "Generating install values..."
          cf-for-k8s-develop/hack/generate-values.sh --cf-domain "${DNS_DOMAIN}" --gcr-service-account-json gcp-service-account.json > cf-install-values.yml

          echo "Installing CF..."
          cf-for-k8s-develop/bin/install-cf.sh cf-install-values.yml

          echo "Configuring DNS..."
          cf-for-k8s-develop/hack/update-gcp-dns.sh "${DNS_DOMAIN}" "${DNS_ZONE_NAME}"

          bosh interpolate --path /cf_admin_password cf-install-values.yml > env-metadata/cf-admin-password.txt
          echo "${DNS_DOMAIN}" > env-metadata/dns-domain.txt

  - task: run-smoke-test
    config:
      <<: *common-test-config
      inputs:
      - name: cf-for-k8s-develop
      - name: env-metadata
      run:
        path: /bin/sh
        args:
        - -ec
        - |
          DNS_DOMAIN=$(cat env-metadata/dns-domain.txt)
          export SMOKE_TEST_API_ENDPOINT="https://api.${DNS_DOMAIN}"
          export SMOKE_TEST_APPS_DOMAIN="${DNS_DOMAIN}"
          export SMOKE_TEST_USERNAME=admin
          export SMOKE_TEST_PASSWORD=$(cat env-metadata/cf-admin-password.txt)
          export SMOKE_TEST_SKIP_SSL=true
          cf-for-k8s-develop/hack/run-smoke-tests.sh

  - task: delete-cf
    input_mapping: {pool-lock: validation-pool}
    config:
      <<: *common-task-config
      inputs:
      - name: pool-lock
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          cluster_name=$(cat pool-lock/name)
          export KUBECONFIG=kube-config.yml
          echo '((ci_k8s_gcp_service_account_json))' > gcp-service-account.json
          gcloud auth activate-service-account --key-file=gcp-service-account.json --project='((ci_k8s_gcp_project_name))' >/dev/null 2>&1
          gcloud container clusters get-credentials "${cluster_name}" --zone '((ci_k8s_gcp_project_zone))' >/dev/null 2>&1

          kapp delete -a cf --yes

  - put: cf-for-k8s-master-push
    params:
      repository: cf-for-k8s-develop

  - put: deliver-tracker-stories
    params:
      repos:
      - cf-for-k8s-develop

  - put: validation-pool
    params: {release: validation-pool}

- name: release-validation-pool-manual
  public: true
  plan:
  - get: validation-pool
  ensure:
    try:
      put: validation-pool
      params: {release: validation-pool}

- name: stability-test-cf-for-k8s
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-master
    - get: every-20-minutes
      trigger: true
  - put: stability-pool
    params: {acquire: true}

  - task: delete-cf
    input_mapping: {pool-lock: stability-pool}
    config:
      <<: *common-task-config
      inputs:
      - name: pool-lock
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          cluster_name=$(cat pool-lock/name)
          export KUBECONFIG=kube-config.yml
          echo '((ci_k8s_gcp_service_account_json))' > gcp-service-account.json
          gcloud auth activate-service-account --key-file=gcp-service-account.json --project='((ci_k8s_gcp_project_name))' >/dev/null 2>&1
          gcloud container clusters get-credentials "${cluster_name}" --zone '((ci_k8s_gcp_project_zone))' >/dev/null 2>&1

          kapp delete -a cf --yes

  - task: install-cf
    input_mapping: {pool-lock: stability-pool}
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-master
      - name: pool-lock
      outputs:
      - name: env-metadata
      params:
        DNS_ZONE_NAME: ((ci_k8s_dns_zone_name))
        DNS_ROOT_DOMAIN: ((ci_k8s_root_domain))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          export KUBECONFIG=kube-config.yml
          cluster_name=$(cat pool-lock/name)
          echo '((ci_k8s_gcp_service_account_json))' > gcp-service-account.json
          gcloud auth activate-service-account --key-file=gcp-service-account.json --project='((ci_k8s_gcp_project_name))' >/dev/null 2>&1
          gcloud container clusters get-credentials "${cluster_name}" --zone '((ci_k8s_gcp_project_zone))' >/dev/null 2>&1

          export DNS_DOMAIN="${cluster_name}.${DNS_ROOT_DOMAIN}"
          cf-for-k8s-master/hack/confirm-network-policy.sh "${cluster_name}" '((ci_k8s_gcp_project_zone))'

          echo "Generating install values..."
          cf-for-k8s-master/hack/generate-values.sh --cf-domain "${DNS_DOMAIN}" --gcr-service-account-json gcp-service-account.json > cf-install-values.yml

          echo "Installing CF..."
          cf-for-k8s-master/bin/install-cf.sh cf-install-values.yml

          echo "Configuring DNS..."
          cf-for-k8s-master/hack/update-gcp-dns.sh "${DNS_DOMAIN}" "${DNS_ZONE_NAME}"

          bosh interpolate --path /cf_admin_password cf-install-values.yml > env-metadata/cf-admin-password.txt
          echo "${DNS_DOMAIN}" > env-metadata/dns-domain.txt

  - task: run-smoke-test
    config:
      <<: *common-test-config
      inputs:
      - name: cf-for-k8s-master
      - name: env-metadata
      run:
        path: /bin/sh
        args:
        - -ec
        - |
          DNS_DOMAIN=$(cat env-metadata/dns-domain.txt)
          export SMOKE_TEST_API_ENDPOINT="https://api.${DNS_DOMAIN}"
          export SMOKE_TEST_APPS_DOMAIN="${DNS_DOMAIN}"
          export SMOKE_TEST_USERNAME=admin
          export SMOKE_TEST_PASSWORD=$(cat env-metadata/cf-admin-password.txt)
          export SMOKE_TEST_SKIP_SSL=true
          cf-for-k8s-master/hack/run-smoke-tests.sh

  - task: delete-cf
    input_mapping: {pool-lock: stability-pool}
    config:
      <<: *common-task-config
      inputs:
      - name: pool-lock
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          cluster_name=$(cat pool-lock/name)
          export KUBECONFIG=kube-config.yml
          echo '((ci_k8s_gcp_service_account_json))' > gcp-service-account.json
          gcloud auth activate-service-account --key-file=gcp-service-account.json --project='((ci_k8s_gcp_project_name))' >/dev/null 2>&1
          gcloud container clusters get-credentials "${cluster_name}" --zone '((ci_k8s_gcp_project_zone))' >/dev/null 2>&1

          kapp delete -a cf --yes

  - put: stability-pool
    params: {release: stability-pool}

- name: release-stability-pool-manual
  public: true
  plan:
  - get: stability-pool
  ensure:
    try:
      put: stability-pool
      params: {release: stability-pool}

- name: fail-prs-to-cf-for-k8s-master
  public: true
  plan:
  - in_parallel:
    - get: runtime-ci
    - get: cf-for-k8s-pr-master
      trigger: true
      version: every
  - task: write-pr-check-failure-comment
    file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
    input_mapping:
      pull-request: cf-for-k8s-pr-master
  - put: cf-for-k8s-pr-master
    params:
      path: cf-for-k8s-pr-master
      status: failure
      context: ((pr_context))
      comment_file: pull-request-comment/comment

- name: run-tests-on-cf-for-k8s-pr
  public: true
  plan:
  - in_parallel:
    - get: runtime-ci
    - get: cf-for-k8s-pr-all-branches
      params:
        integration_tool: rebase
      trigger: true
      version: every

  - put: cf-for-k8s-pr-all-branches
    params:
      path: cf-for-k8s-pr-all-branches
      status: pending
      context: tests

  - do:
    - put: validation-pool
      params: {acquire: true}

    - do:
      - task: delete-cf
        input_mapping: {pool-lock: validation-pool}
        config:
          <<: *common-task-config
          inputs:
          - name: pool-lock
          run:
            path: /bin/bash
            args:
            - -ec
            - |
              cluster_name=$(cat pool-lock/name)
              export KUBECONFIG=kube-config.yml
              echo '((ci_k8s_gcp_service_account_json))' > gcp-service-account.json
              gcloud auth activate-service-account --key-file=gcp-service-account.json --project='((ci_k8s_gcp_project_name))' >/dev/null 2>&1
              gcloud container clusters get-credentials "${cluster_name}" --zone '((ci_k8s_gcp_project_zone))' >/dev/null 2>&1

              kapp delete -a cf --yes

      - task: install-cf
        input_mapping: {pool-lock: validation-pool}
        config:
          <<: *common-task-config
          inputs:
          - name: cf-for-k8s-pr-all-branches
          - name: pool-lock
          outputs:
          - name: env-metadata
          params:
            DNS_ROOT_DOMAIN: ((ci_k8s_root_domain))
            DNS_ZONE_NAME: ((ci_k8s_dns_zone_name))
          run:
            path: /bin/bash
            args:
            - -ec
            - |
              export KUBECONFIG=kube-config.yml
              cluster_name=$(cat pool-lock/name)
              echo '((ci_k8s_gcp_service_account_json))' > gcp-service-account.json
              gcloud auth activate-service-account --key-file=gcp-service-account.json --project='((ci_k8s_gcp_project_name))' >/dev/null 2>&1
              gcloud container clusters get-credentials "${cluster_name}" --zone '((ci_k8s_gcp_project_zone))' >/dev/null 2>&1

              export DNS_DOMAIN="${cluster_name}.${DNS_ROOT_DOMAIN}"
              cf-for-k8s-pr-all-branches/hack/confirm-network-policy.sh "${cluster_name}" '((ci_k8s_gcp_project_zone))'

              echo "Generating install values..."
              cf-for-k8s-pr-all-branches/hack/generate-values.sh --cf-domain "${DNS_DOMAIN}" --gcr-service-account-json gcp-service-account.json > cf-install-values.yml

              echo "Installing CF..."
              cf-for-k8s-pr-all-branches/bin/install-cf.sh cf-install-values.yml

              echo "Configuring DNS..."
              cf-for-k8s-pr-all-branches/hack/update-gcp-dns.sh "${DNS_DOMAIN}" "${DNS_ZONE_NAME}"

              bosh interpolate --path /cf_admin_password cf-install-values.yml > env-metadata/cf-admin-password.txt
              echo "${DNS_DOMAIN}" > env-metadata/dns-domain.txt

      - task: run-smoke-test
        config:
          <<: *common-test-config
          inputs:
          - name: cf-for-k8s-pr-all-branches
          - name: env-metadata
          run:
            path: /bin/sh
            args:
            - -ec
            - |
              DNS_DOMAIN=$(cat env-metadata/dns-domain.txt)
              export SMOKE_TEST_API_ENDPOINT="https://api.${DNS_DOMAIN}"
              export SMOKE_TEST_APPS_DOMAIN="${DNS_DOMAIN}"
              export SMOKE_TEST_USERNAME=admin
              export SMOKE_TEST_PASSWORD=$(cat env-metadata/cf-admin-password.txt)
              export SMOKE_TEST_SKIP_SSL=true
              cf-for-k8s-pr-all-branches/hack/run-smoke-tests.sh

      - task: delete-cf
        input_mapping: {pool-lock: validation-pool}
        config:
          <<: *common-task-config
          inputs:
          - name: pool-lock
          run:
            path: /bin/bash
            args:
            - -ec
            - |
              cluster_name=$(cat pool-lock/name)
              export KUBECONFIG=kube-config.yml
              echo '((ci_k8s_gcp_service_account_json))' > gcp-service-account.json
              gcloud auth activate-service-account --key-file=gcp-service-account.json --project='((ci_k8s_gcp_project_name))' >/dev/null 2>&1
              gcloud container clusters get-credentials "${cluster_name}" --zone '((ci_k8s_gcp_project_zone))' >/dev/null 2>&1

              kapp delete -a cf --yes

      on_failure:
        do:
        - task: write-pr-check-failure-comment
          file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
          input_mapping:
            pull-request: cf-for-k8s-pr-all-branches

        - put: cf-for-k8s-pr-all-branches
          params:
            path: cf-for-k8s-pr-all-branches
            status: failure
            context: tests
            comment_file: pull-request-comment/comment

      on_success:
        put: cf-for-k8s-pr-all-branches
        params:
          path: cf-for-k8s-pr-all-branches
          status: success
          context: tests

    ensure:
      put: validation-pool
      params: {release: validation-pool}

- name: test-vendir-sync-on-cf-for-k8s-pr
  public: true
  plan:
  - in_parallel:
    - get: runtime-ci
    - get: cf-for-k8s-pr-all-branches-and-forks
      params:
        integration_tool: rebase
      trigger: true
      version: every

  - put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: pending
      context: check-vendir-sync

  - task: check-vendir-sync
    config:
      <<: *common-task-config
      inputs:
      - name: cf-for-k8s-pr-all-branches-and-forks
      params:
        VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      run:
        path: /bin/bash
        args:
        - -exc
        - |
          cd cf-for-k8s-pr-all-branches-and-forks
          vendir sync

          set +e
          git status
          git add .
          git --no-pager diff HEAD
          set -e

          git diff-index --quiet HEAD

    on_failure:
      do:
      - task: write-pr-check-failure-comment
        file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
        input_mapping:
          pull-request: cf-for-k8s-pr-all-branches-and-forks

      - put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: failure
          context: check-vendir-sync
          comment_file: pull-request-comment/comment

    on_success:
      put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: success
        context: check-vendir-sync


- name: build-cf-for-k8s-ci-gcp-image
  public: true
  plan:
  - timeout: 4h
    do:
    - in_parallel:
      - get: weekly
        trigger: true
      - get: cf-for-k8s-dockerfiles
        trigger: true
      - get: k14s-io
        trigger: true
    - put: cf-for-k8s-ci-gcp-image
      params:
        build: cf-for-k8s-dockerfiles/ci/dockerfiles/cf-for-k8s-ci/
        push: true

- name: build-cf-test-runner-image
  public: true
  plan:
  - timeout: 4h
    do:
    - in_parallel:
      - get: weekly
        trigger: true
      - get: cf-for-k8s-dockerfiles
        trigger: true
    - put: cf-test-runner-image
      params:
        build: cf-for-k8s-dockerfiles/ci/dockerfiles/cf-test-runner/
        push: true

- name: build-cf-for-k8s-azure-image
  public: true
  plan:
  - timeout: 4h
    do:
    - in_parallel:
      - get: weekly
        trigger: true
      - get: cf-for-k8s-dockerfiles
        trigger: true
      - get: k14s-io
        trigger: true
    - put: cf-for-k8s-azure-image
      params:
        build: cf-for-k8s-dockerfiles/ci/dockerfiles/cf-for-k8s-azure/
        push: true

- name: validate-azure
  serial: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-master
    - get: thursday-am
      trigger: true
  - task: create-cluster-install-cf
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-for-k8s-azure
      inputs:
        - name: cf-for-k8s-master
      outputs:
      - name: env-metadata
      params:
        DNS_ROOT_DOMAIN: ((ci_k8s_root_domain))
        DNS_ZONE_NAME: ((ci_k8s_dns_zone_name))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          export KUBECONFIG=kube-config.yml
          cluster_name='azure-ci-test-cluster'
          cluster_resource_group='azure-ci-test-resource-group'
          echo "Logging into azure..."
          az login --service-principal --username '((aks_cluster_creation_service_principal_username))' --password '((aks_cluster_creation_service_principal_password))' --tenant '((aks_cluster_creation_tenant))' >/dev/null 2>&1
          echo "Setting azure account subscription..."
          az account set --subscription '((relint_azure_subscription))' >/dev/null 2>&1
          echo "Creating resource group..."
          az group create --name $cluster_resource_group --location westus  >/dev/null 2>&1
          echo "Creating AKS cluster..."
          az aks create --resource-group $cluster_resource_group --name $cluster_name --node-count 5 --node-vm-size Standard_DS3_v2 --network-plugin azure --network-policy azure --enable-addons monitoring --generate-ssh-keys --service-principal '((aks_cluster_creation_service_principal_username))' --client-secret '((aks_cluster_creation_service_principal_password))' >/dev/null 2>&1
          echo "Getting credentials..."
          az aks get-credentials --resource-group $cluster_resource_group --name $cluster_name --file $KUBECONFIG --overwrite-existing >/dev/null 2>&1

          export DNS_DOMAIN="${cluster_name}.${DNS_ROOT_DOMAIN}"
          #TODO, make this check work for AKS
          # cf-for-k8s-master/hack/confirm-network-policy.sh "${cluster_name}" '((ci_k8s_gcp_project_zone))'

          echo "Generating install values..."
          echo '((ci_k8s_gcp_service_account_json))' > gcp-service-account.json
          cf-for-k8s-master/hack/generate-values.sh --cf-domain "${DNS_DOMAIN}" --gcr-service-account-json gcp-service-account.json > cf-install-values.yml

          echo "Installing CF..."
          cf-for-k8s-master/bin/install-cf.sh cf-install-values.yml

          echo "Configuring DNS..."
          echo '((ci_k8s_gcp_service_account_json))' > gcp-service-account.json
          gcloud auth activate-service-account --key-file=gcp-service-account.json --project='((ci_k8s_gcp_project_name))' >/dev/null 2>&1
          cf-for-k8s-master/hack/update-gcp-dns.sh "${DNS_DOMAIN}" "${DNS_ZONE_NAME}"

          bosh interpolate --path /cf_admin_password cf-install-values.yml > env-metadata/cf-admin-password.txt
          echo "${DNS_DOMAIN}" > env-metadata/dns-domain.txt

  - task: run-smoke-test
    config:
      <<: *common-test-config
      inputs:
      - name: cf-for-k8s-master
      - name: env-metadata
      run:
        path: /bin/sh
        args:
        - -ec
        - |
          DNS_DOMAIN=$(cat env-metadata/dns-domain.txt)
          export SMOKE_TEST_API_ENDPOINT="https://api.${DNS_DOMAIN}"
          export SMOKE_TEST_APPS_DOMAIN="${DNS_DOMAIN}"
          export SMOKE_TEST_USERNAME=admin
          export SMOKE_TEST_PASSWORD=$(cat env-metadata/cf-admin-password.txt)
          export SMOKE_TEST_SKIP_SSL=true
          cf-for-k8s-master/hack/run-smoke-tests.sh

  - task: delete-cluster
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-for-k8s-azure
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          cluster_name='azure-ci-test-cluster'
          cluster_resource_group='azure-ci-test-resource-group'
          export KUBECONFIG=kube-config.yml

          echo "Logging into azure..."
          az login --service-principal --username '((aks_cluster_creation_service_principal_username))' --password '((aks_cluster_creation_service_principal_password))' --tenant '((aks_cluster_creation_tenant))' >/dev/null 2>&1
          echo "Setting azure account subscription..."
          az account set --subscription '((relint_azure_subscription))' >/dev/null 2>&1
          echo "Getting credentials..."
          az aks get-credentials --resource-group $cluster_resource_group --name $cluster_name --file $KUBECONFIG --overwrite-existing >/dev/null 2>&1

          echo "Deleting AKS cluster..."
          az aks delete --resource-group ${cluster_resource_group} --name ${cluster_name} -y >/dev/null 2>&1
          echo "Deleting resource group..."
          az group delete --name ${cluster_resource_group} -y >/dev/null 2>&1
          echo "Cluster cleanup complete."
