---
resource_types:
- name: pool-trigger
  type: docker-image
  source:
    repository: cfmobile/pool-trigger

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

resources:
- name: cf-for-k8s-develop-ci
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
      - ci/**

- name: terraform
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      prefix: k8s-dev
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))

- name: every-2-minutes
  type: time
  icon: clock-outline
  source:
    interval: 2m
    start: 7:00 AM
    stop: 5:00 PM
    days: [Monday, Tuesday, Wednesday, Thursday, Friday]
    location: America/Los_Angeles

- name: every-4-minutes-off-hours
  type: time
  icon: clock-outline
  source:
    interval: 4m
    start: 7:00 PM
    stop: 7:00 AM
    days: [Monday, Tuesday, Wednesday, Thursday, Friday]
    location: America/Los_Angeles

- name: every-4-minutes-weekends
  type: time
  icon: clock-outline
  source:
    interval: 4m
    days: [Saturday, Sunday]
    location: America/Los_Angeles

- name: after-7pm
  type: time
  icon: clock-outline
  source:
    start: 7:00 PM
    stop: 7:30 PM
    days: [Monday, Tuesday, Wednesday, Thursday, Friday]
    location: America/Los_Angeles

- name: tues-fri-afternoon
  type: time
  icon: clock-outline
  source:
    start: 3:00 PM
    stop: 7:00 PM
    days: [Tuesday, Friday]
    location: America/Los_Angeles

- name: cf-for-k8s-gke-terraform-templates
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-for-k8s
    branch: develop
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - deploy/gke/terraform/**

- name: pool-repo
  type: git
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: building-pool
  type: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))
    pool: k8s-dev/building

- name: building-pool-trigger
  type: pool-trigger
  check_every: 10s
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))
    pool: k8s-dev/building

- name: ready-pool
  type: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))
    pool: k8s-dev/ready

- name: destroy-pool
  type: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))
    pool: k8s-dev/destroy

- name: destroy-pool-trigger
  type: pool-trigger
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))
    pool: k8s-dev/destroy

- name: relint-private-slack
  type: slack-notification
  icon: slack
  source:
    url: ((relint_slack_incoming_webhook))

jobs:
- name: check-pool-size
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop-ci
    - get: every-2-minutes
      trigger: true
    - get: pool-repo
  - try:
      task: check-pool-size
      file: cf-for-k8s-develop-ci/ci/tasks/check-pool-size/task.yml
      params:
        POOL_SIZE_BUFFER_TARGET: 2
      on_failure: # Build a new env
        do:
        # Add an entry to the building/unclaimed pool and give it a cool name
        - task: generate-random-name
          file: cf-for-k8s-develop-ci/ci/tasks/generate-random-name/task.yml
        - put: building-pool
          params: {add: new-lock}

- name: check-pool-size-after-hours
  plan:
  - in_parallel:
    - get: cf-for-k8s-develop-ci
    - get: every-4-minutes-off-hours
      trigger: true
    - get: every-4-minutes-weekends
      trigger: true
    - get: pool-repo
  - try:
      task: check-pool-size
      file: cf-for-k8s-develop-ci/ci/tasks/check-pool-size/task.yml
      params:
        POOL_SIZE_BUFFER_TARGET: 1
      on_failure: # Build a new env
        do:
        # Add an entry to the building/unclaimed pool and give it a cool name
        - task: generate-random-name
          file: cf-for-k8s-develop-ci/ci/tasks/generate-random-name/task.yml
        - put: building-pool
          params: {add: new-lock}

- name: acquire-lock-for-create-cluster
  plan:
  - get: building-pool-trigger
    version: every
    trigger: true
  - put: building-pool
    params: {acquire: true}

- name: create-cluster
  plan:
  - in_parallel:
    - get: building-cluster
      resource: building-pool
      version: every
      passed: [acquire-lock-for-create-cluster]
      trigger: true
    - get: pool-repo
    - get: cf-for-k8s-gke-terraform-templates
  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      inputs:
      - name: building-cluster
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
        DOMAIN: k8s-dev.relint.rocks
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "us-central1"
          zone = "us-central1-a"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          env_name = "$(cat building-cluster/name)"
          env_dns_domain = "$(cat building-cluster/name).${DOMAIN}"
          dns_zone_name = "k8s-dev-relint-rocks"
          EOT
  - put: terraform
    params:
      terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
      env_name_file: building-cluster/name
      delete_on_failure: true
      var_files: [ tf-vars/input.tfvars ]
  - task: write-metadata-to-lock-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      inputs:
      - name: building-cluster
      - name: terraform
      outputs:
      - name: ready-cluster
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          cp -v building-cluster/name ready-cluster/name
          cp -v terraform/metadata ready-cluster/metadata
  - put: ready-pool
    params:
      add: ready-cluster
  - put: building-pool
    params:
      remove: building-cluster

- name: spin-down-after-hours
  plan:
  - in_parallel:
    - get: after-7pm
      trigger: true
    - get: pool-repo
  - task: delete-unclaimed
    # this moves everything from ready/unclaimed to destroy/unclaimed
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      inputs:
      - name: pool-repo
      outputs:
      - name: updated-pool-repo
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          git config --global user.name "Cluster Management Overlord"
          git config --global user.email "cf-release-integration+ci@pivotal.io"
          git clone pool-repo updated-pool-repo
          cd updated-pool-repo
          find k8s-dev/ready/unclaimed -type f ! -name .gitkeep | xargs -n1 -I{} git mv -v {} k8s-dev/destroy/unclaimed

          if [[ -n "$(git status --porcelain)" ]]; then
            git commit -m'Destroying unclaimed K8s dev pool environments'
          fi
  - put: pool-repo
    params:
      repository: updated-pool-repo
      rebase: true

- name: acquire-lock-for-destroy-cluster
  plan:
  - get: destroy-pool-trigger
    version: every
    trigger: true
  - put: destroy-pool
    params: {acquire: true}

- name: destroy-cluster
  plan:
  - in_parallel:
    - get: destroy-cluster
      resource: destroy-pool
      version: every
      passed: [acquire-lock-for-destroy-cluster]
      trigger: true
    - get: cf-for-k8s-gke-terraform-templates
  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      inputs:
      - name: destroy-cluster
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
        DOMAIN: k8s-dev.relint.rocks
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          env_name = "$(cat destroy-cluster/name)"
          env_dns_domain = "$(cat building-cluster/name).${DOMAIN}"
          dns_zone_name = "k8s-dev-relint-rocks"
          EOT
  - put: terraform
    params:
      terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
      env_name_file: destroy-cluster/name
      action: destroy
      var_files: [ tf-vars/input.tfvars ]
    get_params:
      action: destroy
  - put: destroy-pool
    params: {remove: destroy-cluster}

- name: post-to-slack
  plan:
  - in_parallel:
    - get: tues-fri-afternoon
      trigger: true
    - get: pool-repo
  - task: generate-list-of-claimed-envs
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: relintdockerhubpushbot/cf-deployment-concourse-tasks}
      inputs:
        - name: pool-repo
      outputs:
        - name: message
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          set -eu

          apt-get install -y bsdmainutils

          # INPUTS
          pool_dir="pool-repo/k8s-dev/ready"

          # OUTPUTS
          output_file="message/message.txt"

          function print_env_info {
            # Colors
            local red blue
            # red='\033[0;31m'
            # blue='\033[0;34m'
            # nc='\033[0m'
            red=''
            blue=''
            nc=''

            echo -e "${blue}Rounding up claimed environments...${nc}"

            pushd "${pool_dir}/claimed" > /dev/null
              claimed_files="$(git log --reverse --name-only --pretty=format: -- * | sort -u | xargs)"

              output="${blue}\n* ENV *\t* CLAIMED BY *\t* CLAIMED ON *\t* CLAIMED SINCE *\t* STORY *\n"

              for file in ${claimed_files}; do
                echo "Processing ${file}..." >&2
                file="$(basename "${file}")"
                author="$(git log --max-count=1 --pretty='format:%an' "${file}")"
                committer="$(git log --max-count=1 --pretty='format:%cn' "${file}")"
                claimed_since="$(git log --max-count=1 --pretty='format:%ar' "${file}")"
                workstation="$(git log --max-count=1 --pretty='format:%s' "${file}" | sed -E "s/^manually claim [^[:space:]]+ on ([^[:space:]]+).*$/\1/")"
                story="$(git log --max-count=1 --pretty='format:%s' "${file}" | awk -F '[][]' '{print $2}')"

                if [ "${author}" != "${committer}" ]; then
                  claimed_by="${author}+${committer}"
                else
                  claimed_by="${author}"
                fi

                output="${output}${file}\t${claimed_by}\t${workstation}\t${claimed_since}\t${story}\n"
              done

            popd > /dev/null
            echo -e "${output}" | column -t -s $'\t'
          }

          message="Time for another CLUSTER MGMT OVERLORD round-up! If you have a cluster claimed that you no longer need, run \`unclaim_k8s_env ENV_NAME\` to set it free!"
          printf "${message}" >> "${output_file}"
          echo "" >> "${output_file}"
          echo '```' >> "${output_file}"
          printf "$(print_env_info)" >> "${output_file}"
          echo '```' >> "${output_file}"

          echo "Message:"
          cat "${output_file}"
  - put: relint-private-slack
    params:
      text_file: message/message.txt
      username: "Cluster Management Overload"
      icon_emoji: ':flyingmoneyparrot:'
