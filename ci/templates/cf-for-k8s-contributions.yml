#@ load("@ytt:data", "data")

---
groups:
- name: pr-validation
  jobs:
  - fail-prs-to-cf-for-k8s-master
  - pass-prs-to-cf-for-k8s-develop
  - run-unit-tests-on-pr
  - validate-pr-on-gke
  - validate-pr-on-gke-external-db
  - validate-pr-on-gke-rds
  - validate-pr-on-newest-k8s-kind
  - validate-pr-on-oldest-k8s-kind
  - test-vendir-sync-on-cf-for-k8s-pr
- name: all-autobumps
  jobs:
  #@ for release in data.values.releases:
  - #@ "{}-run-unit-tests".format(release.name)
  - #@ "{}-validate-on-newest-k8s-version".format(release.name)
  - #@ "{}-validate-on-oldest-k8s-version".format(release.name)
  - #@ "{}-validate-upgrade".format(release.name)
  - #@ "{}-push-to-develop".format(release.name)
  #@ end
  #@ for release in data.values.releases:
- name: #@ release.name
  jobs:
  - #@ "{}-run-unit-tests".format(release.name)
  - #@ "{}-validate-on-newest-k8s-version".format(release.name)
  - #@ "{}-validate-on-oldest-k8s-version".format(release.name)
  - #@ "{}-validate-upgrade".format(release.name)
  - #@ "{}-push-to-develop".format(release.name)
  #@ end
- name: buildpacks
  jobs:
    - bump-buildpacks

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: teliaoss/github-pr-resource

- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

resources:
- name: cf-for-k8s-develop
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readwrite_deploy_key.private_key))
    ignore_paths:
      - ci/**

- name: cf-for-k8s-ci
  type: git
  icon: github
  source:
    branch: develop
    uri: git@github.com:cloudfoundry/cf-for-k8s
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
      - ci/**

- name: weekday-pm
  type: time
  icon: clock-outline
  source:
    days:
    - Monday
    - Tuesday
    - Wednesday
    - Thursday
    - Friday
    start: 6:00 PM
    stop: 7:00 PM
    location: America/Los_Angeles

#@ for release in data.values.releases:
- name: #@ release.name
  #@ if release.github_release:
  type: github-release
  icon: github
  source:
    owner: #@ release.github_org
    repository: #@ release.name
    access_token: ((cf_deployment_release_bot_access_token))
    #@ if hasattr(release, "consume_prereleases"):
    pre_release: true
    #@ end
  #@ else:
  type: git
  icon: github
  source:
    branch: #@ release.github_branch
    uri: #@ release.github_uri
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
  #@ end
#@ end

- name: terraform
  type: terraform
  source:
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))

- name: ready-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: k8s-dev/ready
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: destroy-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: master
    pool: k8s-dev/destroy
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: cf-for-k8s-gke-terraform-templates
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-for-k8s
    branch: develop
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
    - deploy/gke/terraform/**

- name: cf-for-k8s-kind-gcp-terraform-templates
  type: git
  source:
    uri: git@github.com:cloudfoundry/cf-for-k8s
    branch: develop
    private_key: ((cf_for_k8s_readonly_deploy_key.private_key))
    paths:
      - deploy/kind-on-gcp/terraform/**

- name: cf-for-k8s-pr-master
  type: pull-request
  icon: github
  source:
    access_token: ((github_status_bot_repo_access_token))
    repository: cloudfoundry/cf-for-k8s
    disable_forks: false
    base_branch: master

- name: cf-for-k8s-pr-develop
  type: pull-request
  icon: github
  source:
    access_token: ((github_status_bot_repo_access_token))
    repository: cloudfoundry/cf-for-k8s
    disable_forks: false
    base_branch: develop

- name: cf-for-k8s-pr-all-branches-and-forks
  type: pull-request
  icon: github
  source:
    access_token: ((github_status_bot_repo_access_token))
    repository: cloudfoundry/cf-for-k8s
    disable_forks: false

- name: runtime-ci
  type: git
  icon: github
  source:
    branch: master
    uri: https://github.com/cloudfoundry/runtime-ci.git

- name: terraform-rds
  type: terraform
  source:
    env_name: aws-rds
    backend_type: gcs
    backend_config:
      bucket: relint-k8s-cluster-state
      credentials: ((dev_cluster_pool_gcs_admin_service_account_json))

#@ for source, bpnames in [['community', ['ruby', 'python']], ['buildpacks', ['java', 'nodejs', 'go', 'dotnet-core', 'php', 'procfile']]]:
#@   for bpname in bpnames:
- name: #@ "{}-buildpack".format(bpname)
  type: docker-image
  source:
    repository: #@ "gcr.io/paketo-{}/{}".format(source, bpname)
#@   end
#@ end

jobs:
- name: fail-prs-to-cf-for-k8s-master
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-pr-master
      trigger: true
      version: every
    - get: runtime-ci

  - task: write-pr-check-failure-comment
    file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
    input_mapping:
      pull-request: cf-for-k8s-pr-master

  - put: cf-for-k8s-pr-master
    params:
      path: cf-for-k8s-pr-master
      status: failure
      context: ((pr_context))
      comment_file: pull-request-comment/comment

- name: pass-prs-to-cf-for-k8s-develop
  public: true
  plan:
  - get: cf-for-k8s-pr-develop
    trigger: true
    version: every

  - put: cf-for-k8s-pr-develop
    params:
      path: cf-for-k8s-pr-develop
      status: success
      context: ((pr_context))

- name: run-unit-tests-on-pr
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-pr-all-branches-and-forks
      trigger: true
      version: every
    - get: cf-for-k8s-ci
    - get: runtime-ci

  - put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: pending
      context: run-unit-tests

  - task: run-unit-tests
    file: cf-for-k8s-ci/ci/tasks/run-unit-tests/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks

    on_failure:
      do:
      - task: write-pr-check-failure-comment
        file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
        input_mapping:
          pull-request: cf-for-k8s-pr-all-branches-and-forks

      - put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: failure
          context: run-unit-tests
          comment_file: pull-request-comment/comment

    on_success:
      put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: success
        context: run-unit-tests

- name: test-vendir-sync-on-cf-for-k8s-pr
  public: true
  plan:
  - in_parallel:
    - get: runtime-ci
    - get: cf-for-k8s-pr-all-branches-and-forks
      params:
        integration_tool: rebase
      trigger: true
      version: every
    - get: cf-for-k8s-ci

  - put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: pending
      context: check-vendir-sync

  - task: check-vendir-sync
    file: cf-for-k8s-ci/ci/tasks/check-vendir-sync/task.yml
    input_mapping:
      ci-tasks: cf-for-k8s-ci
      cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
    params:
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))

    on_failure:
      do:
      - task: write-pr-check-failure-comment
        file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
        input_mapping:
          pull-request: cf-for-k8s-pr-all-branches-and-forks

      - put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: failure
          context: check-vendir-sync
          comment_file: pull-request-comment/comment

    on_success:
      put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: success
        context: check-vendir-sync

- name: validate-pr-on-gke
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-pr-all-branches-and-forks
      params:
        integration_tool: rebase
      trigger: true
      version: every
      passed:
      - run-unit-tests-on-pr
      - test-vendir-sync-on-cf-for-k8s-pr
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
    - get: runtime-ci

  - put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: pending
      context: upgrade-check-uptime

  - put: ready-pool
    params:
      acquire: true

  - do:
    - task: install-cf-develop
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
        pool-lock: ready-pool
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        DOMAIN: k8s-dev.relint.rocks
        USE_EXTERNAL_APP_REGISTRY: true
        APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
        APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))

    - task: push-test-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      params:
        APP_NAME: jp-node-app
        VERIFY_EXISTING_APP: false

    - task: upgrade-to-pr
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
        pool-lock: ready-pool
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        UPGRADE: true
        UPTIMER: true
        DOMAIN: k8s-dev.relint.rocks
        USE_EXTERNAL_APP_REGISTRY: true
        APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
        APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))

    - in_parallel:
      - task: run-smoke-tests
        file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
        input_mapping:
          cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
        params:
          SMOKE_TEST_SKIP_SSL: false

      - task: verify-existing-app
        file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
        input_mapping:
          cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
        params:
          APP_NAME: jp-node-app
          VERIFY_EXISTING_APP: true

    on_failure:
      do:
      - task: write-pr-check-failure-comment
        file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
        input_mapping:
          pull-request: cf-for-k8s-pr-all-branches-and-forks

      - put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: failure
          context: upgrade-check-uptime
          comment_file: pull-request-comment/comment

    on_success:
      put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: success
        context: upgrade-check-uptime

    ensure:
      do:
      - task: delete-cf
        file: cf-for-k8s-ci/ci/tasks/delete-cf/task.yml
        input_mapping:
          pool-lock: ready-pool
        params:
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))

      - put: destroy-pool
        params:
          add: ready-pool

      - put: ready-pool
        params:
          remove: ready-pool

- name: validate-pr-on-gke-external-db
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-pr-all-branches-and-forks
      params:
        integration_tool: rebase
      trigger: true
      version: every
      passed:
      - run-unit-tests-on-pr
      - test-vendir-sync-on-cf-for-k8s-pr
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
    - get: cf-for-k8s-gke-terraform-templates
    - get: runtime-ci

  - put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: pending
      context: external-db

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-for-k8s-ci
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          echo "pr-validation-gke-ext-db" > tf-vars/env-name.txt
          cat > tf-vars/input.tfvars <<EOT
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          env_name = "$(cat tf-vars/env-name.txt)"
          env_dns_domain = "$(cat tf-vars/env-name.txt).((ci_k8s_root_domain))"
          dns_zone_name = "((ci_k8s_dns_zone_name))"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files:
      - tf-vars/input.tfvars

  - task: install-postgres
    file: cf-for-k8s-ci/ci/tasks/install-postgres/task.yml
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))

  - do:
    - task: install-cf-develop
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-develop
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        DOMAIN: cf-for-k8s.relint.rocks
        USE_EXTERNAL_APP_REGISTRY: true
        APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
        APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
        APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
        USE_EXTERNAL_DB: "true"

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      APP_NAME: jp-node-app
      VERIFY_EXISTING_APP: false

  - task: upgrade-to-pr
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      UPGRADE: true
      UPTIMER: true
      DOMAIN: cf-for-k8s.relint.rocks
      USE_EXTERNAL_APP_REGISTRY: true
      APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
      APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
      USE_EXTERNAL_DB: "true"

  - in_parallel:
    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      params:
        SMOKE_TEST_SKIP_SSL: false

    - task: verify-existing-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      params:
        APP_NAME: jp-node-app
        VERIFY_EXISTING_APP: true

  on_failure:
    do:
    - task: write-pr-check-failure-comment
      file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
      input_mapping:
        pull-request: cf-for-k8s-pr-all-branches-and-forks

    - put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: failure
        context: external-db
        comment_file: pull-request-comment/comment

  on_success:
    put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: success
      context: external-db

  ensure:
    do:
    - task: delete-cf
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: relintdockerhubpushbot/cf-for-k8s-ci
        inputs:
        - name: cf-for-k8s-ci
        - name: tf-vars
        params:
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            source cf-for-k8s-ci/ci/helpers/gke.sh
            cluster_name="$(cat tf-vars/env-name.txt)"
            gcloud_auth "${cluster_name}"
            kapp delete -a cf --yes

    - put: terraform
      params:
        terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files:
        - tf-vars/input.tfvars
      get_params:
        action: destroy

- name: validate-pr-on-gke-rds
  serial: true
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-pr-all-branches-and-forks
      params:
        integration_tool: rebase
      trigger: true
      version: every
      passed:
      - run-unit-tests-on-pr
      - test-vendir-sync-on-cf-for-k8s-pr
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
    - get: cf-for-k8s-gke-terraform-templates
    - get: runtime-ci
    - get: terraform-rds

  - put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: pending
      context: upgrade-with-rds

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-for-k8s-ci
      outputs:
        - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          echo "pr-validation-rds" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          env_name = "$(cat tf-vars/env-name.txt)"
          env_dns_domain = "$(cat tf-vars/env-name.txt).((ci_k8s_root_domain))"
          dns_zone_name = "((ci_k8s_dns_zone_name))"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files:
      - tf-vars/input.tfvars

  - task: initialize-rds
    file: cf-for-k8s-ci/ci/tasks/initialize-rds/task.yml
    params:
      PGPASSWORD: ((ci_k8s_aws_rds_database_password))

  - task: install-cf-develop
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      DOMAIN: cf-for-k8s.relint.rocks
      USE_EXTERNAL_APP_REGISTRY: true
      APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
      APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
      USE_EXTERNAL_DB: "true"

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      APP_NAME: jp-node-app
      VERIFY_EXISTING_APP: false
    attempts: 3

  - task: upgrade-to-pr
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      UPGRADE: true
      UPTIMER: true
      DOMAIN: cf-for-k8s.relint.rocks
      USE_EXTERNAL_APP_REGISTRY: true
      APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
      APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
      USE_EXTERNAL_DB: "true"

  - in_parallel:
      - task: run-smoke-tests
        file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
        input_mapping:
          cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
        params:
          SMOKE_TEST_SKIP_SSL: false

      - task: verify-existing-app
        file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
        input_mapping:
          cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
        params:
          APP_NAME: jp-node-app
          VERIFY_EXISTING_APP: true

  on_failure:
    do:
    - task: write-pr-check-failure-comment
      file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
      input_mapping:
        pull-request: cf-for-k8s-pr-all-branches-and-forks

    - put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: failure
        context: upgrade-with-rds
        comment_file: pull-request-comment/comment

  on_success:
    put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: success
      context: upgrade-with-rds

  ensure:
    do:
    - task: delete-cf
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: relintdockerhubpushbot/cf-for-k8s-ci
        inputs:
          - name: cf-for-k8s-ci
          - name: tf-vars
        params:
          GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            source cf-for-k8s-ci/ci/helpers/gke.sh
            cluster_name="$(cat tf-vars/env-name.txt)"
            gcloud_auth "${cluster_name}"
            kapp delete -a cf --yes

    - put: terraform
      params:
        terraform_source: cf-for-k8s-gke-terraform-templates/deploy/gke/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files:
        - tf-vars/input.tfvars
      get_params:
        action: destroy

    - task: delete-rds
      file: cf-for-k8s-ci/ci/tasks/delete-rds/task.yml
      params:
        PGPASSWORD: ((ci_k8s_aws_rds_database_password))

- name: validate-pr-on-newest-k8s-kind
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-pr-all-branches-and-forks
      trigger: true
      version: every
      passed:
      - run-unit-tests-on-pr
      - test-vendir-sync-on-cf-for-k8s-pr
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
    - get: cf-for-k8s-kind-gcp-terraform-templates
    - get: runtime-ci

  - put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: pending
      context: newest-supported-k8s-version

  - task: create-tf-vars-file
    file: cf-for-k8s-ci/ci/tasks/create-tf-vars-file/task.yml
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_REGION: ((ci_k8s_gcp_project_region))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))

  - put: terraform
    params:
      terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files:
      - tf-vars/input.tfvars

  - do:
    - task: create-kind-cluster
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: newest_version
      attempts: 5

    - task: install-cf
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    on_failure:
      do:
      - task: write-pr-check-failure-comment
        file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
        input_mapping:
          pull-request: cf-for-k8s-pr-all-branches-and-forks

      - put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: failure
          context: newest-supported-k8s-version
          comment_file: pull-request-comment/comment

    on_success:
      put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: success
        context: newest-supported-k8s-version

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files:
        - tf-vars/input.tfvars
      get_params:
        action: destroy

- name: validate-pr-on-oldest-k8s-kind
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-pr-all-branches-and-forks
      trigger: true
      version: every
      passed:
      - run-unit-tests-on-pr
      - test-vendir-sync-on-cf-for-k8s-pr
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
    - get: cf-for-k8s-kind-gcp-terraform-templates
    - get: runtime-ci

  - put: cf-for-k8s-pr-all-branches-and-forks
    params:
      path: cf-for-k8s-pr-all-branches-and-forks
      status: pending
      context: oldest-supported-k8s-version

  - task: create-tf-vars-file
    file: cf-for-k8s-ci/ci/tasks/create-tf-vars-file/task.yml
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_REGION: ((ci_k8s_gcp_project_region))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))

  - put: terraform
    params:
      terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files:
      - tf-vars/input.tfvars

  - do:
    - task: create-kind-cluster
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: oldest_version
      attempts: 5

    - task: install-cf
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-pr-all-branches-and-forks
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    on_failure:
      do:
      - task: write-pr-check-failure-comment
        file: runtime-ci/tasks/write-pr-check-failure-comment/task.yml
        input_mapping:
          pull-request: cf-for-k8s-pr-all-branches-and-forks

      - put: cf-for-k8s-pr-all-branches-and-forks
        params:
          path: cf-for-k8s-pr-all-branches-and-forks
          status: failure
          context: oldest-supported-k8s-version
          comment_file: pull-request-comment/comment

    on_success:
      put: cf-for-k8s-pr-all-branches-and-forks
      params:
        path: cf-for-k8s-pr-all-branches-and-forks
        status: success
        context: oldest-supported-k8s-version

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-kind-gcp-terraform-templates/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files:
        - tf-vars/input.tfvars
      get_params:
        action: destroy

#@ for release in data.values.releases:
- name: #@ "{}-run-unit-tests".format(release.name)
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
    - get: #@ release.name
    #@ if release.github_release:
      trigger: true
    #@ else:
    - get: weekday-pm
      trigger: true
    #@ end

  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: #@ release.name
    params:
      BUILD_DIR: #@ release.build_dir
      GITHUB_RELEASE: #@ release.github_release
      #@ if hasattr(release, "vendir_name"):
      REPO_NAME: #@ release.vendir_name
      #@ else:
      REPO_NAME: #@ release.name
      #@ end
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      VENDIR_GITHUB_RELEASE: #@ release.vendir_github_release

  - task: run-unit-tests
    file: cf-for-k8s-ci/ci/tasks/run-unit-tests/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-bump

- name: #@ "{}-validate-on-oldest-k8s-version".format(release.name)
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - #@ "{}-run-unit-tests".format(release.name)
    - get: #@ release.name
      passed:
      - #@ "{}-run-unit-tests".format(release.name)
      trigger: true

  #! TODO reduce duplication of this bump release task
  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: #@ release.name
    params:
      BUILD_DIR: #@ release.build_dir
      GITHUB_RELEASE: #@ release.github_release
      #@ if hasattr(release, "vendir_name"):
      REPO_NAME: #@ release.vendir_name
      #@ else:
      REPO_NAME: #@ release.name
      #@ end
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      VENDIR_GITHUB_RELEASE: #@ release.vendir_github_release

  - task: create-tf-vars-file
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
      outputs:
      - name: tf-vars
      params:
        SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
      run:
        path: /bin/bash
        args:
        - -ec
        - |
          env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
          echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
          cat <<EOT > tf-vars/input.tfvars
          project = "((ci_k8s_gcp_project_name))"
          region = "((ci_k8s_gcp_project_region))"
          zone = "((ci_k8s_gcp_project_zone))"
          service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
          machine_type = "n1-standard-8"
          EOT

  - put: terraform
    params:
      terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
      env_name_file: tf-vars/env-name.txt
      delete_on_failure: true
      var_files:
      - tf-vars/input.tfvars

  - do:
    - task: create-kind-cluster
      file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        VERSION_SELECTOR: oldest_version
      attempts: 5

    - task: install-cf
      file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      params:
        GCP_KEY: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

    ensure:
      put: terraform
      params:
        terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        action: destroy
        var_files:
        - tf-vars/input.tfvars
      get_params:
        action: destroy

- name: #@ "{}-validate-on-newest-k8s-version".format(release.name)
  public: true
  plan:
    - in_parallel:
      - get: cf-for-k8s-ci
      - get: cf-for-k8s-develop
        passed:
        - #@ "{}-run-unit-tests".format(release.name)
      - get: #@ release.name
        passed:
        - #@ "{}-run-unit-tests".format(release.name)
        trigger: true

    #! TODO reduce duplication of this bump release task
    - task: bump-release-onto-develop
      file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
      input_mapping:
        release: #@ release.name
      params:
        BUILD_DIR: #@ release.build_dir
        GITHUB_RELEASE: #@ release.github_release
        #@ if hasattr(release, "vendir_name"):
        REPO_NAME: #@ release.vendir_name
        #@ else:
        REPO_NAME: #@ release.name
        #@ end
        VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
        VENDIR_GITHUB_RELEASE: #@ release.vendir_github_release

    - task: create-tf-vars-file
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
        outputs:
        - name: tf-vars
        params:
          SERVICE_ACCOUNT_JSON: ((dev_cluster_pool_admin_service_account_json))
        run:
          path: /bin/bash
          args:
          - -ec
          - |
            env_suffix=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)
            echo "ci-test-cluster-${env_suffix}" > tf-vars/env-name.txt
            cat <<EOT > tf-vars/input.tfvars
            project = "((ci_k8s_gcp_project_name))"
            region = "((ci_k8s_gcp_project_region))"
            zone = "((ci_k8s_gcp_project_zone))"
            service_account_key = "$(echo ${SERVICE_ACCOUNT_JSON} | jq -c '.' | sed -e 's#"#\\"#g' -e 's#\\n#\\\\n#g')"
            machine_type = "n1-standard-8"
            EOT

    - put: terraform
      params:
        terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
        env_name_file: tf-vars/env-name.txt
        delete_on_failure: true
        var_files:
        - tf-vars/input.tfvars

    - do:
      - task: create-kind-cluster
        file: cf-for-k8s-ci/ci/tasks/create-kind-cluster/task.yml
        input_mapping:
          cf-for-k8s: cf-for-k8s-bump
        params:
          GCP_KEY: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
          VERSION_SELECTOR: newest_version
        attempts: 5

      - task: install-cf
        file: cf-for-k8s-ci/ci/tasks/install-cf-on-kind/task.yml
        input_mapping:
          cf-for-k8s: cf-for-k8s-bump
        params:
          GCP_KEY: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

      - task: run-smoke-tests
        file: cf-for-k8s-ci/ci/tasks/run-smoke-tests-on-kind/task.yml
        input_mapping:
          cf-for-k8s: cf-for-k8s-bump
        params:
          GCP_KEY: ((ci_k8s_gcp_service_account_json))
          GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))

      ensure:
        put: terraform
        params:
          terraform_source: cf-for-k8s-develop/deploy/kind-on-gcp/terraform
          env_name_file: tf-vars/env-name.txt
          action: destroy
          var_files:
          - tf-vars/input.tfvars
        get_params:
          action: destroy

- name: #@ "{}-validate-upgrade".format(release.name)
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - #@ "{}-run-unit-tests".format(release.name)
    - get: #@ release.name
      passed:
      - #@ "{}-run-unit-tests".format(release.name)
      trigger: true

  - put: ready-pool
    params:
      acquire: true

  #! TODO reduce duplication of this bump release task
  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: #@ release.name
    params:
      BUILD_DIR: #@ release.build_dir
      GITHUB_RELEASE: #@ release.github_release
      #@ if hasattr(release, "vendir_name"):
      REPO_NAME: #@ release.vendir_name
      #@ else:
      REPO_NAME: #@ release.name
      #@ end
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      VENDIR_GITHUB_RELEASE: #@ release.vendir_github_release

  - task: first-install-cf-develop
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
      pool-lock: ready-pool
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      DOMAIN: k8s-dev.relint.rocks

  - task: push-test-app
    file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-develop
    params:
      APP_NAME: my-node-app

  - task: upgrade-cf-with-component-bump
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-bump
      pool-lock: ready-pool
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      DOMAIN: k8s-dev.relint.rocks
      UPGRADE: true
      UPTIMER: true

  - in_parallel:
    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      params:
        SMOKE_TEST_SKIP_SSL: false

    - task: verify-existing-app
      file: cf-for-k8s-ci/ci/tasks/push-test-app/task.yml
      input_mapping:
        cf-for-k8s: cf-for-k8s-bump
      params:
        APP_NAME: my-node-app
        VERIFY_EXISTING_APP: true

  - task: delete-cf
    file: cf-for-k8s-ci/ci/tasks/delete-cf/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))

  on_success:
    do:
    - put: destroy-pool
      params:
        add: ready-pool

    - put: ready-pool
      params:
        remove: ready-pool

- name: #@ "{}-push-to-develop".format(release.name)
  public: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop
      passed:
      - #@ "{}-validate-on-oldest-k8s-version".format(release.name)
      - #@ "{}-validate-on-newest-k8s-version".format(release.name)
      - #@ "{}-validate-upgrade".format(release.name)
    - get: #@ release.name
      passed:
      - #@ "{}-validate-on-oldest-k8s-version".format(release.name)
      - #@ "{}-validate-on-newest-k8s-version".format(release.name)
      - #@ "{}-validate-upgrade".format(release.name)
      trigger: true

  #! TODO reduce duplication of this bump release task
  - task: bump-release-onto-develop
    file: cf-for-k8s-ci/ci/tasks/bump-core-component/task.yml
    input_mapping:
      release: #@ release.name
    params:
      BUILD_DIR: #@ release.build_dir
      GITHUB_RELEASE: #@ release.github_release
      #@ if hasattr(release, "vendir_name"):
      REPO_NAME: #@ release.vendir_name
      #@ else:
      REPO_NAME: #@ release.name
      #@ end
      VENDIR_GITHUB_API_TOKEN: ((github_status_bot_vendir_github_read_token))
      VENDIR_GITHUB_RELEASE: #@ release.vendir_github_release

  - put: cf-for-k8s-develop
    params:
      repository: cf-for-k8s-bump
      rebase: true
#@ end

- name: bump-buildpacks
  public: true
  plan:
  - in_parallel:
#@ for bpname in ['ruby', 'python', 'java', 'nodejs', 'go', 'dotnet-core', 'php', 'procfile']:
    - get: #@ "{}-buildpack".format(bpname)
      trigger: true
#@ end
    - get: cf-for-k8s-ci
    - get: cf-for-k8s-develop

  - put: ready-pool
    params:
      acquire: true

  - task: bump-buildpacks
    file: cf-for-k8s-ci/ci/tasks/bump-buildpacks/task.yml

  - task: validate-buildpacks
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-bumped
      pool-lock: ready-pool
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      DOMAIN: k8s-dev.relint.rocks

  - task: run-smoke-tests
    file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
    input_mapping:
      cf-for-k8s: cf-for-k8s-bumped
    params:
      SMOKE_TEST_SKIP_SSL: false

  - put: cf-for-k8s-develop
    params:
      repository: cf-for-k8s-bumped
      rebase: true

  ensure:
    do:
    - put: destroy-pool
      params:
        add: ready-pool

    - put: ready-pool
      params:
        remove: ready-pool
