#@ load("@ytt:assert", "assert")
#@ load("@ytt:data", "data")
#@ load("@ytt:library", "library")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:template", "template")
#@ load("@ytt:yaml", "yaml")

#@ def capi_host():
#@   if len(data.values.capi.database.host) > 0:
#@     return data.values.capi.database.host
#@   else:
#@     return "cf-db-postgresql.cf-db.svc.cluster.local"
#@   end
#@ end

#@ def capi_values():
system_namespace: #@ data.values.system_namespace
workloads_namespace: #@ data.values.workloads_namespace
staging_namespace: #@ data.values.staging_namespace
system_domain: #@ data.values.system_domain
app_domains:
#@ for/end domain in data.values.app_domains:
#@overlay/append
- #@ domain

blobstore:
  endpoint: #@ data.values.blobstore.endpoint
  region: #@ data.values.blobstore.region
  access_key_id: #@ data.values.blobstore.access_key_id
  secret_access_key_secret_name: capi-blobstore-secret-key
  package_directory_key: #@ data.values.blobstore.package_directory_key
  droplet_directory_key: #@ data.values.blobstore.droplet_directory_key
  resource_directory_key: #@ data.values.blobstore.resource_directory_key
  buildpack_directory_key: #@ data.values.blobstore.buildpack_directory_key
  aws_signature_version: #@ data.values.blobstore.aws_signature_version

ccdb:
  adapter: #@ data.values.capi.database.adapter
  host: #@ capi_host()
  port: #@ data.values.capi.database.port
  user: #@ data.values.capi.database.user
  password_secret_name: capi-database-password
  database: #@ data.values.capi.database.name
  ca_cert: #@ data.values.capi.database.ca_cert

eirini:
  serverCerts:
    secretName: eirini-internal-tls-certs

apiServer:
  opi:
    client_cert: #@ data.values.internal_certificate.crt
    client_key: #@ data.values.internal_certificate.key
    ca: #@ data.values.internal_certificate.ca

metric_proxy:
  ca:
    secret_name: #@ data.values.metric_proxy.ca.secret_name
  cert:
    secret_name: #@ data.values.metric_proxy.cert.secret_name

uaa:
  serverCerts:
    secretName: uaa-certs
  clients:
    cloud_controller_username_lookup:
      secret_name: cloud-controller-username-lookup-client-secret
    cf_api_controllers:
      secret_name: cf-api-controllers-client-secret

kpack:
  registry:
    hostname: #@ data.values.app_registry.hostname
    repository_prefix: #@ data.values.app_registry.repository_prefix
    username: #@ data.values.app_registry.username
    password: #@ data.values.app_registry.password
#@ end

#@ capi = library.get("capi-k8s-release")
--- #@ template.replace(capi.with_data_values(capi_values()).eval())

#! expose CAPI under the system domain
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: cf-api-external-virtual-service
  namespace: #@ data.values.system_namespace
spec:
  hosts:
  - #@ "api." + data.values.system_domain
  gateways:
  - #@ data.values.system_namespace + "/istio-ingressgateway"
  http:
  - route:
    - destination:
        host: #@ "capi." + data.values.system_namespace + ".svc.cluster.local"
        port:
          number: 80

---
apiVersion: v1
kind: Secret
metadata:
  name: capi-database-password
  namespace: #@ data.values.system_namespace
type: Opaque
stringData:
  password: #@ data.values.capi.database.password
---
apiVersion: v1
kind: Secret
metadata:
  name: capi-blobstore-secret-key
  namespace: #@ data.values.system_namespace
type: Opaque
stringData:
  password: #@ data.values.blobstore.secret_access_key
---
apiVersion: v1
kind: Secret
metadata:
  name: cf-api-controllers-client-secret
  namespace: #@ data.values.system_namespace
type: Opaque
stringData:
  password: #@ data.values.capi.cf_api_controllers_client_secret
---
apiVersion: v1
kind: Secret
metadata:
  name: cloud-controller-username-lookup-client-secret
  namespace: #@ data.values.system_namespace
type: Opaque
stringData:
  password: #@ data.values.capi.cc_username_lookup_client_secret
---
apiVersion: v1
kind: Secret
metadata:
  name: capi-database-encryption-key-secret
  namespace: #@ data.values.system_namespace
type: Opaque
stringData:
  password: #@ data.values.capi.database.encryption_key
