#@ load("@ytt:base64", "base64")
#@ load("@ytt:data", "data")
#@ load("@ytt:json", "json")
#@ load("@ytt:library", "library")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:template", "template")
#@ load("@ytt:yaml", "yaml")

#@ eirini = library.get("eirini")
--- #@ template.replace(eirini.eval())

---
apiVersion: v1
kind: Secret
metadata:
  name: eirini-internal-tls-certs
  namespace: #@ data.values.system_namespace
data:
  tls.crt: #@ data.values.internal_certificate.crt
  tls.key: #@ data.values.internal_certificate.key
  tls.ca: #@ data.values.internal_certificate.ca

#! Allow app traffic from the istio-ingressgateway
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-app-ingress-from-ingressgateway
  namespace: #@ data.values.workloads_namespace
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          cf-for-k8s.cloudfoundry.org/istio-system-ns: ""
      podSelector:
        matchLabels:
          istio: ingressgateway

#! Add Secret to allow K8s to download app images from the provided registry
#! https://github.com/cloudfoundry/cf-for-k8s/issues/74
#! may want to keep this in sync with https://github.com/cloudfoundry-incubator/eirini-release/blob/master/helm/cf/templates/registry-secret.yaml
---
apiVersion: v1
kind: Secret
metadata:
  name: app-registry-credentials
  namespace: #@ data.values.workloads_namespace
type: kubernetes.io/dockerconfigjson
data:
  #@ docker_auth = base64.encode("{}:{}".format(data.values.app_registry.username, data.values.app_registry.password))
  #@ docker_creds = {"username": data.values.app_registry.username, "password": data.values.app_registry.password, "auth": docker_auth}
  .dockerconfigjson: #@ base64.encode(json.encode({"auths": {data.values.app_registry.hostname: docker_creds}}))

#@ def events():
cc_internal_api: #@ "http://capi.{}.svc.cluster.local:9023".format(data.values.system_namespace)
#@ end

#@ def opi():
opi:
  serve_plaintext: true
  #@overlay/match missing_ok=True
  plaintext_port: 8080
  #@overlay/remove
  tls_port:
#@ end

#! Use http/port 8080 for eirini-capi communications and let istio do the encryption
#@overlay/match by=overlay.subset({"kind": "ConfigMap", "metadata":{"name":"eirini"}})
#@yaml/text-templated-strings
---
data:
  #@overlay/replace via=lambda a,_: yaml.encode(overlay.apply(yaml.decode(a), events()))
  events.yml:

  #@overlay/replace via=lambda a,_: yaml.encode(overlay.apply(yaml.decode(a), opi()))
  opi.yml:

#@overlay/match by=overlay.subset({"kind": "Service", "metadata":{"name":"eirini"}})
---
spec:
  #@overlay/replace
  ports:
    - name: http
      port: 8080
      protocol: TCP

#@overlay/match by=overlay.subset({"kind": "Deployment", "metadata":{"name":"eirini"}})
---
spec:
  template:
    spec:
      containers:
      #@overlay/match by="name"
      - name: opi
        #@overlay/replace
        ports:
          - name: http
            containerPort: 8080
