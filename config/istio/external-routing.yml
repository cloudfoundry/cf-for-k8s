#@ load("@ytt:base64", "base64")
#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@ load("/namespaces.star", "system_namespace", "workloads_namespace")

#! this secret contains the certificate/key combo used for the external system domain
---
apiVersion: v1
kind: Secret
metadata:
  name: cf-system-cert
  namespace: istio-system
  annotations:
    kapp.k14s.io/change-rule.istio-ingressgateway: "upsert before upserting istio.io/ingressgateway"
data:
  tls.key: #@ base64.encode(data.values.system_certificate.key)
  tls.crt: #@ base64.encode(data.values.system_certificate.crt)

---
apiVersion: v1
kind: Secret
metadata:
  name: cf-workloads-cert
  namespace: istio-system
  annotations:
    kapp.k14s.io/change-rule.istio-ingressgateway: "upsert before upserting istio.io/ingressgateway"
data:
  tls.key: #@ base64.encode(data.values.workloads_certificate.key)
  tls.crt: #@ base64.encode(data.values.workloads_certificate.crt)

#! the following overlay ensures the above Secret is created before the ingressgateway Deployment since we're not using SDS
#@overlay/match by=overlay.subset({"kind":"DaemonSet","metadata":{"name":"istio-ingressgateway"}})
---
metadata:
  #@overlay/match missing_ok=True
  annotations:
    #@overlay/match missing_ok=True
    kapp.k14s.io/change-group: istio.io/ingressgateway

#! this gateway is used to expose CF services in the cluster, externally
#@ load("gateway.lib.yml", "gateway")
--- #@ gateway(data.values.system_domain, data.values.app_domains, system_namespace(), workloads_namespace(), data.values.gateway.https_only)

#! This will set overlay a static IP for the istio load balancer.
#@overlay/match by=overlay.subset({"kind": "Service", "metadata":{"name": "istio-ingressgateway"}})
---
#@ if data.values.load_balancer.static_ip:
spec:
  #@overlay/match missing_ok=True
  loadBalancerIP: #@ data.values.load_balancer.static_ip
#@ end
