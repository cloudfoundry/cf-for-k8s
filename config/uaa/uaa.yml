#@ load("@ytt:assert", "assert")
#@ load("@ytt:data", "data")
#@ load("@ytt:library", "library")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:template", "template")
#@ load("@ytt:yaml", "yaml")

#@ def uaa_db_host():
#@   if len(data.values.uaa.database.host) > 0:
#@     return data.values.uaa.database.host
#@   else:
#@     return "cf-db-postgresql.cf-db.svc.cluster.local"
#@   end
#@ end

#@ def database_query_params(scheme):
#@   useSSL=len(data.values.uaa.database.ca_cert) > 0
#@   if scheme == "postgresql":
#@     return "?sslmode=verify-full&sslfactory=org.postgresql.ssl.DefaultJavaSSLFactory" if useSSL else "?sslmode=disable"
#@   elif scheme == "mysql":
#@     return "?useSSL=true" if useSSL else "?useSSL=false"
#@   end
#@   return ""
#@ end

#@ def uaa_db_jdbc_url():
#@   return "jdbc:{}://{}:{}/{}{}".format(
#@     data.values.uaa.database.adapter,
#@     uaa_db_host(),
#@     data.values.uaa.database.port,
#@     data.values.uaa.database.name,
#@     database_query_params(data.values.uaa.database.adapter))
#@ end

#@ def uaa_values():
admin:
  client_secret: #@ data.values.uaa.admin_client_secret

database:
  url: #@ uaa_db_jdbc_url()
  scheme: #@ data.values.uaa.database.adapter
  username: #@ data.values.uaa.database.user
  password: #@ data.values.uaa.database.password

#@ if/end len(data.values.uaa.database.ca_cert) > 0:
#@overlay/replace
ca_certs:
  -  #@ data.values.uaa.database.ca_cert

namespace: #@ data.values.system_namespace

jwt:
  policy:
    activeKeyId: #@ data.values.uaa.jwt_policy.key_id
    #@overlay/replace
    keys:
    - keyId: #@ data.values.uaa.jwt_policy.key_id
      signingKey: #@ data.values.uaa.jwt_policy.signing_key
#@ end

#@ def uaa_config():
#@overlay/match missing_ok=True
encryption:
  active_key_label: #@ data.values.uaa.encryption_key.label
  #@overlay/replace
  encryption_keys:
  - label: #@ data.values.uaa.encryption_key.label
    passphrase: #@ data.values.uaa.encryption_key.passphrase

LOGIN_SECRET: #@ data.values.uaa.login_secret_name

#@overlay/match missing_ok=True
scim:
  userids_enabled: true
  user:
    override: true
  groups:
    zones.read: Read identity zones
    zones.write: Create and update identity zones
    idps.read: Retrieve identity providers
    idps.write: Create and update identity providers
    clients.admin: Create, modify and delete OAuth clients
    clients.write: Create and modify OAuth clients
    clients.read: Read information about OAuth clients
    clients.secret: Change the password of an OAuth client
    scim.write: Create, modify and delete SCIM entities, i.e. users and groups
    scim.read: Read all SCIM entities, i.e. users and groups
    scim.create: Create users
    scim.userids: Read user IDs and retrieve users by ID
    scim.zones: Control a user's ability to manage a zone
    scim.invite: Send invitations to users
    password.write: Change your password
    oauth.approval: Manage approved scopes
    oauth.login: Authenticate users outside of the UAA
    openid: Access profile information, i.e. email, first and last name, and phone number
    groups.update: Update group information and memberships
    uaa.user: Act as a user in the UAA
    uaa.resource: Serve resources protected by the UAA
    uaa.admin: Act as an administrator throughout the UAA
    uaa.none: Forbid acting as a user
    uaa.offline_token: Allow offline access

#@overlay/match missing_ok=True
oauth:
  client:
    override: true
  #@overlay/match-child-defaults missing_ok=True
  clients:
    cf:
      id: cf
      override: true
      authorized-grant-types: password,refresh_token
      scope: cloud_controller.read,cloud_controller.write,openid,password.write,cloud_controller.admin,scim.read,scim.write,doppler.firehose,uaa.user,routing.router_groups.read,routing.router_groups.write
      authorities: uaa.none
      access-token-validity: 600
      refresh-token-validity: 2592000
      secret: ""
    admin:
      authorized-grant-types: client_credentials
      authorities: clients.read,clients.write,clients.secret,uaa.admin,scim.read,scim.write,password.write,openid
      autoapprove:
      - openid
      id: admin
    cloud_controller_username_lookup:
      authorities: scim.userids
      authorized-grant-types: client_credentials
    capi_kpack_watcher:
      authorities: cloud_controller.write,cloud_controller.update_build_state
      authorized-grant-types: client_credentials
  #@overlay/match missing_ok=True
  user:
    authorities:
      - openid
      - scim.me
      - scim.userids
      - cloud_controller.read
      - cloud_controller.write
      - cloud_controller_service_permissions.read
      - password.write
      - uaa.user
      - approvals.me
      - oauth.approvals
      - profile
      - roles
      - user_attributes
      - uaa.offline_token

issuer:
  uri: #@ "https://uaa." + data.values.system_domain

#@overlay/match missing_ok=True
zones:
  internal:
    hostnames:
    - #@ "uaa." + data.values.system_namespace + ".svc.cluster.local"

#@overlay/match missing_ok=True
#@overlay/match-child-defaults missing_ok=True
login:
  url: #@ "https://login." + data.values.system_domain
#@ if len(data.values.uaa.login.service_provider.key) > 0:
  entityBaseURL: #@ "https://uaa." + data.values.system_domain
  entityID: cloudfoundry-saml-login
  serviceProviderKey: #@ data.values.uaa.login.service_provider.key
  serviceProviderKeyPassword: #@ data.values.uaa.login.service_provider.key_password
  serviceProviderCertificate: #@ data.values.uaa.login.service_provider.certificate
#@ end

#@overlay/match missing_ok=True
uaa:
  url: #@ "https://uaa." + data.values.system_domain
  token:
    url: #@ "https://uaa." + data.values.system_domain + "/oauth/token"
  approvals:
    url: #@ "https://uaa." + data.values.system_domain + "/approvals"
  login:
    url: #@ "https://uaa." + data.values.system_domain + "/authenticate"
  limitedFunctionality:
    enabled: false
    whitelist:
      endpoints:
        - /oauth/authorize/**
        - /oauth/token/**
        - /check_token/**
        - /login/**
        - /login.do
        - /logout/**
        - /logout.do
        - /saml/**
        - /autologin/**
        - /authenticate/**
        - /idp_discovery/**
      methods:
        - GET
        - HEAD
        - OPTIONS
#@ end

#@ def overlay_uaa_config(old, new):
#@   return yaml.encode(overlay.apply(yaml.decode(old), uaa_config()))
#@ end

#@ uaa = library.get("uaa")
---
  #@ template.replace(uaa.with_data_values(uaa_values()).eval())

#! overlay CF-specific UAA configuration given there is no equivalent data values.
#@overlay/match by=overlay.subset({"kind":"ConfigMap", "metadata":{"name":"uaa-config"}})
---
data:
  #@overlay/replace via=overlay_uaa_config
  uaa.yml:

#! expose UAA under the system domain
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: uaa-external-virtual-service
  namespace: #@ data.values.system_namespace
spec:
  hosts:
  - #@ "uaa." + data.values.system_domain
  - #@ "*.uaa." + data.values.system_domain
  - #@ "login." + data.values.system_domain
  - #@ "*.login." + data.values.system_domain
  gateways:
  - #@ data.values.system_namespace + "/istio-ingressgateway"
  http:
  - route:
    - destination:
        host: #@ "uaa." + data.values.system_namespace + ".svc.cluster.local"
        port:
          number: 8080

---
apiVersion: v1
kind: Secret
metadata:
  name: uaa-certs
  namespace: #@ data.values.system_namespace
type: Opaque
data:
  uaa.key: #@ data.values.internal_certificate.key
  uaa.crt: #@ data.values.internal_certificate.crt
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ data.values.uaa.encryption_key_passphrase_secret_name
  namespace: #@ data.values.system_namespace
type: Opaque
stringData:
  password: #@ data.values.uaa.encryption_key.passphrase

#@ def uaa_client_credential_data(client_name, credential):
oauth:
  #@yaml/text-templated-strings
  clients:
    (@= client_name @):
      secret: #@ credential
#@ end

#@ def uaa_client_credential(client_name, credential, secret_name):
apiVersion: v1
kind: Secret
metadata:
  name: #@ secret_name
  namespace: #@ data.values.system_namespace
type: Opaque
stringData:
  client_credentials.yml: #@ yaml.encode(uaa_client_credential_data(client_name, credential))
#@ end

#@ def uaa_cf_admin_user_credentials():
scim:
  users:
  - #@ "admin|" + data.values.cf_admin_password + "|admin@admin.tld|first|last|clients.read,cloud_controller.admin,doppler.firehose,network.admin,openid,routing.router_groups.read,routing.router_groups.write,scim.read,scim.write|uaa"
#@ end

--- #@ uaa_client_credential("cf", "", "uaa-cf-client-secret")
--- #@ uaa_client_credential("cloud_controller_username_lookup", data.values.capi.cc_username_lookup_client_secret, "uaa-cloud-controller-username-lookup-client-secret")
--- #@ uaa_client_credential("capi_kpack_watcher", data.values.capi.kpack_watcher_client_secret, "uaa-capi-kpack-watcher-client-secret")

---
apiVersion: v1
kind: Secret
metadata:
  name: uaa-cf-admin-user-credentials
  namespace: #@ data.values.system_namespace
type: Opaque
stringData:
  cf_admin_user_credentials.yml: #@ yaml.encode(uaa_cf_admin_user_credentials())

#@ load("@uaa/k8s:templates/deployment.star",
#@  "secrets_dir")
#@overlay/match by=overlay.subset({"kind":"Deployment", "metadata":{"name":"uaa"}})
---
spec:
  template:
    spec: #! pod spec
      containers:
      #@overlay/match by="name"
      - name: uaa
        volumeMounts:
        #@overlay/append
        - name: cf-admin-user-credentials-file
          mountPath: #@ "{}/cf_admin_user_credentials.yml".format(secrets_dir)
          subPath: cf_admin_user_credentials.yml
          readOnly: true
        #@overlay/append
        - name: cc-admin-client-credentials-file
          mountPath: #@ "{}/cf_client_credentials.yml".format(secrets_dir)
          subPath: client_credentials.yml
          readOnly: true
        #@overlay/append
        - name: cloud-controller-username-lookup-client-credentials-file
          mountPath: #@ "{}/cloud_controller_username_lookup_client_credentials.yml".format(secrets_dir)
          subPath: client_credentials.yml
          readOnly: true
        #@overlay/append
        - name: capi-kpack-watcher-client-credentials-file
          mountPath: #@ "{}/capi_kpack_watcher_client_credentials.yml".format(secrets_dir)
          subPath: client_credentials.yml
          readOnly: true
      volumes:
      #@overlay/append
      - name: cf-admin-user-credentials-file
        secret:
          secretName: uaa-cf-admin-user-credentials
      #@overlay/append
      - name: cc-admin-client-credentials-file
        secret:
          secretName: uaa-cf-client-secret
      #@overlay/append
      - name: cloud-controller-username-lookup-client-credentials-file
        secret:
          secretName: uaa-cloud-controller-username-lookup-client-secret
      #@overlay/append
      - name: capi-kpack-watcher-client-credentials-file
        secret:
          secretName: uaa-capi-kpack-watcher-client-secret

