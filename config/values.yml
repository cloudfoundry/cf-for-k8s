#@data/values
---
system_namespace: cf-system
workloads_namespace: cf-workloads

#! your system domain, e.g., "system.cf.example.com"
system_domain:
#! list of app domains, e.g., ["apps.cf.example.com"]
app_domains: []

#! password for admin user in plain text
cf_admin_password:

#! control deployment of a blobstore for CF
cf_blobstore:
  access_key: "admin"
  secret_key: ""

#! control optional deployment of a database for CF
cf_db:
  admin_password: ""
  enabled: true

images:
  capi: ""
  nginx: ""
  cfroutesync: ""
  log_cache: "logcache/log-cache"
  syslog_server: "logcache/syslog-server"
  log_cache_gateway: "logcache/log-cache-gateway"
  fluent: "logcache/cf-k8s-logging"

system_certificate:
  #! Base64-encoded certificate for the wildcard
  #! subdomain of the system domain (e.g., CN=*.system.cf.example.com)
  crt: ""
  #! Base64-encoded private key for the cert above
  key: ""
  #! Base64-encoded CA certificate used to sign the system certifcate
  ca: ""

capi:
  blobstore:
    endpoint: "http://cf-blobstore-minio.cf-blobstore.svc.cluster.local:9000"
  database:
    #! or mysql2, as needed
    adapter: postgres
    host: ""
    port: 5432
    user: cloud_controller
    #! DB user password in plain text
    password: ""
    name: cloud_controller

uaa:
  #! client secret for uaa admin client in plain text
  admin_client_secret: ""

  database:
    #! or mysql2, as needed
    adapter: postgresql
    host: ""
    port: 5432
    user: uaa
    #! DB user password in plain text
    password: ""
    name: uaa

  certificate:
    #! Base64-encoded certificate for the uaa service inside
    #! the kubernetes cluster (i.e., CN=uaa.cf-system.svc.cluster.local)
    crt: ""
    #! Base64-encoded private key for the cert above
    key: ""

doppler:
  tls:
    #! Base64-encoded certificate for the doppler service inside
    #! the kubernetes cluster (i.e., CN=doppler.cf-system.svc.cluster.local)
    crt: ""
    #! Base64-encoded private key for the cert above
    key: ""

eirini:
  tls:
    #! Base64-encoded certificate for the eirini service inside
    #! the kubernetes cluster (i.e., CN=eirini.cf-system.svc.cluster.local)
    crt: ""
    #! Base64-encoded private key for the cert above
    key: ""

log_cache_ca:
  crt: "" #! Base64-encoded ca for the log cache
  key: "" #! Base64-encoded private key for the cert above

log_cache:
  crt: "" #! Base64-encoded cert for the log cache requires CN of log-cache
  key: "" #! Base64-encoded private key for the cert above

log_cache_metrics:
  crt: "" #! Base64-encoded cert for the log cache metrics requires CN of log-cache-metrics
  key: "" #! Base64-encoded private key for the cert above

log_cache_gateway:
  crt: "" #! Base64-encoded cert for the log cache gateway requires Name of localhost
  key: "" #! Base64-encoded private key for the cert above

log_cache_syslog:
  crt: "" #! Base64-encoded cert for the log cache syslog server requires CN of log-cache-syslog
  key: "" #! Base64-encoded private key for the cert above

log_cache_external:
  crt: "" #! Base64-encoded cert for the log cache external cert
  key: "" #! Base64-encoded private key for the cert above

log_cache_client:
  id: "" #! comment
  secret: "" #! comment

docker_registry:
  http_secret: "" #! A random piece of data used to sign state that may be stored with the client to protect against tampering. For production environments you should generate a random piece of data using a cryptographically secure random generator.
